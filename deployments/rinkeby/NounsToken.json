{
  "address": "0x554046176F5B187E1273dA9784787696837009AE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_noundersDAO",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "contract INounsDescriptor",
          "name": "_descriptor",
          "type": "address"
        },
        {
          "internalType": "contract INounsSeeder",
          "name": "_seeder",
          "type": "address"
        },
        {
          "internalType": "contract IProxyRegistry",
          "name": "_proxyRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DescriptorLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract INounsDescriptor",
          "name": "descriptor",
          "type": "address"
        }
      ],
      "name": "DescriptorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MinterLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "MinterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NounBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint48",
              "name": "background",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "body",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "accessory",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "head",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "glasses",
              "type": "uint48"
            }
          ],
          "indexed": false,
          "internalType": "struct INounsSeeder.Seed",
          "name": "seed",
          "type": "tuple"
        }
      ],
      "name": "NounCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "noundersDAO",
          "type": "address"
        }
      ],
      "name": "NoundersDAOUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "SeederLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract INounsSeeder",
          "name": "seeder",
          "type": "address"
        }
      ],
      "name": "SeederUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nounId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "votes",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "dataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "descriptor",
      "outputs": [
        {
          "internalType": "contract INounsDescriptor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDescriptorLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMinterLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSeederLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockDescriptor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockSeeder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "noundersDAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyRegistry",
      "outputs": [
        {
          "internalType": "contract IProxyRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seeder",
      "outputs": [
        {
          "internalType": "contract INounsSeeder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "seeds",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "background",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "body",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "accessory",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "head",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "glasses",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newContractURIHash",
          "type": "string"
        }
      ],
      "name": "setContractURIHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INounsDescriptor",
          "name": "_descriptor",
          "type": "address"
        }
      ],
      "name": "setDescriptor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_noundersDAO",
          "type": "address"
        }
      ],
      "name": "setNoundersDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INounsSeeder",
          "name": "_seeder",
          "type": "address"
        }
      ],
      "name": "setSeeder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        }
      ],
      "name": "votesToDelegate",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c5480160d313ce9d49e4b9ffa9b04d1d09aa0c036f0cdbb4b23dd11cc94092c",
  "receipt": {
    "to": null,
    "from": "0x9700C08dB89246CeE319370b88907c474499cC0C",
    "contractAddress": "0x554046176F5B187E1273dA9784787696837009AE",
    "transactionIndex": 9,
    "gasUsed": "3418964",
    "logsBloom": "0x
    "blockHash": "0xe1e998eacd42d56ac4b411247361b611b6e1774613d725b3f0135011f952121a",
    "transactionHash": "0x9c5480160d313ce9d49e4b9ffa9b04d1d09aa0c036f0cdbb4b23dd11cc94092c",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 11043583,
        "transactionHash": "0x9c5480160d313ce9d49e4b9ffa9b04d1d09aa0c036f0cdbb4b23dd11cc94092c",
        "address": "0x554046176F5B187E1273dA9784787696837009AE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009700c08db89246cee319370b88907c474499cc0c"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xe1e998eacd42d56ac4b411247361b611b6e1774613d725b3f0135011f952121a"
      }
    ],
    "blockNumber": 11043583,
    "cumulativeGasUsed": "7627232",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9700C08dB89246CeE319370b88907c474499cC0C",
    "0x9700C08dB89246CeE319370b88907c474499cC0C",
    "0xf560D84eF2eDF8e8c17Db26e9b2427795DA70cA5",
    "0x8bED3f5c8aD8014EaCba068ac0C61140B82bdae8",
    "0xeCeAa7453a77bFE339B25D9D9E91009CdE71c768"
  ],
  "numDeployments": 1,
  "solcInputHash": "23dfb7880f8b990e16e9118c4af870fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_noundersDAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"contract INounsDescriptor\",\"name\":\"_descriptor\",\"type\":\"address\"},{\"internalType\":\"contract INounsSeeder\",\"name\":\"_seeder\",\"type\":\"address\"},{\"internalType\":\"contract IProxyRegistry\",\"name\":\"_proxyRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DescriptorLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract INounsDescriptor\",\"name\":\"descriptor\",\"type\":\"address\"}],\"name\":\"DescriptorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MinterLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NounBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"body\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"accessory\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"glasses\",\"type\":\"uint48\"}],\"indexed\":false,\"internalType\":\"struct INounsSeeder.Seed\",\"name\":\"seed\",\"type\":\"tuple\"}],\"name\":\"NounCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"noundersDAO\",\"type\":\"address\"}],\"name\":\"NoundersDAOUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SeederLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract INounsSeeder\",\"name\":\"seeder\",\"type\":\"address\"}],\"name\":\"SeederUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nounId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"dataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"descriptor\",\"outputs\":[{\"internalType\":\"contract INounsDescriptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDescriptorLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMinterLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSeederLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDescriptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockSeeder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noundersDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyRegistry\",\"outputs\":[{\"internalType\":\"contract IProxyRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seeder\",\"outputs\":[{\"internalType\":\"contract INounsSeeder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seeds\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"body\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"accessory\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"glasses\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newContractURIHash\",\"type\":\"string\"}],\"name\":\"setContractURIHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INounsDescriptor\",\"name\":\"_descriptor\",\"type\":\"address\"}],\"name\":\"setDescriptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_noundersDAO\",\"type\":\"address\"}],\"name\":\"setNoundersDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INounsSeeder\",\"name\":\"_seeder\",\"type\":\"address\"}],\"name\":\"setSeeder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"votesToDelegate\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"delegate(address)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getCurrentVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"getPriorVotes(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"lockDescriptor()\":{\"details\":\"This cannot be reversed and is only callable by the owner when not locked.\"},\"lockMinter()\":{\"details\":\"This cannot be reversed and is only callable by the owner when not locked.\"},\"lockSeeder()\":{\"details\":\"This cannot be reversed and is only callable by the owner when not locked.\"},\"mint()\":{\"details\":\"Call _mintTo with the to address(es).\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setContractURIHash(string)\":{\"details\":\"Only callable by the owner.\"},\"setDescriptor(address)\":{\"details\":\"Only callable by the owner when not locked.\"},\"setMinter(address)\":{\"details\":\"Only callable by the owner when not locked.\"},\"setNoundersDAO(address)\":{\"details\":\"Only callable by the nounders DAO when not locked.\"},\"setSeeder(address)\":{\"details\":\"Only callable by the owner when not locked.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"votesToDelegate(address)\":{\"details\":\"Used when calling `_delegate()`\"}},\"version\":1},\"userdoc\":{\"events\":{\"DelegateChanged(address,address,address)\":{\"notice\":\"An event thats emitted when an account changes its delegate\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"notice\":\"An event thats emitted when a delegate account's vote balance changes\"}},\"kind\":\"user\",\"methods\":{\"DELEGATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the delegation struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"burn(uint256)\":{\"notice\":\"Burn a noun.\"},\"checkpoints(address,uint32)\":{\"notice\":\"A record of votes checkpoints for each account, by index\"},\"contractURI()\":{\"notice\":\"The IPFS URI of contract-level metadata.\"},\"dataURI(uint256)\":{\"notice\":\"Similar to `tokenURI`, but always serves a base64 encoded data URI with the JSON contents directly inlined.\"},\"decimals()\":{\"notice\":\"Defines decimals as per ERC-20 convention to make integrations with 3rd party governance platforms easier\"},\"delegate(address)\":{\"notice\":\"Delegate votes from `msg.sender` to `delegatee`\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates votes from signatory to `delegatee`\"},\"delegates(address)\":{\"notice\":\"Overrides the standard `Comp.sol` delegates mapping to return the delegator's own address if they haven't delegated. This avoids having to delegate to oneself.\"},\"getCurrentVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"getPriorVotes(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\"},\"lockDescriptor()\":{\"notice\":\"Lock the descriptor.\"},\"lockMinter()\":{\"notice\":\"Lock the minter.\"},\"lockSeeder()\":{\"notice\":\"Lock the seeder.\"},\"mint()\":{\"notice\":\"Mint a Noun to the minter, along with a possible nounders reward Noun. Nounders reward Nouns are minted every 10 Nouns, starting at 0, until 183 nounder Nouns have been minted (5 years w/ 24 hour auctions).\"},\"nonces(address)\":{\"notice\":\"A record of states for signing / validating signatures\"},\"numCheckpoints(address)\":{\"notice\":\"The number of checkpoints for each account\"},\"setContractURIHash(string)\":{\"notice\":\"Set the _contractURIHash.\"},\"setDescriptor(address)\":{\"notice\":\"Set the token URI descriptor.\"},\"setMinter(address)\":{\"notice\":\"Set the token minter.\"},\"setNoundersDAO(address)\":{\"notice\":\"Set the nounders DAO.\"},\"setSeeder(address)\":{\"notice\":\"Set the token seeder.\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"},\"votesToDelegate(address)\":{\"notice\":\"The votes a delegator can delegate, which is the current balance of the delegator.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NounsToken.sol\":\"NounsToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NounsToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title The Nouns ERC-721 token\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\\nimport { ERC721Checkpointable } from './base/ERC721Checkpointable.sol';\\nimport { INounsDescriptor } from './interfaces/INounsDescriptor.sol';\\nimport { INounsSeeder } from './interfaces/INounsSeeder.sol';\\nimport { INounsToken } from './interfaces/INounsToken.sol';\\nimport { ERC721 } from './base/ERC721.sol';\\nimport { IERC721 } from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport { IProxyRegistry } from './external/opensea/IProxyRegistry.sol';\\n\\ncontract NounsToken is INounsToken, Ownable, ERC721Checkpointable {\\n    // The nounders DAO address (creators org)\\n    address public noundersDAO;\\n\\n    // An address who has permissions to mint Nouns\\n    address public minter;\\n\\n    // The Nouns token URI descriptor\\n    INounsDescriptor public descriptor;\\n\\n    // The Nouns token seeder\\n    INounsSeeder public seeder;\\n\\n    // Whether the minter can be updated\\n    bool public isMinterLocked;\\n\\n    // Whether the descriptor can be updated\\n    bool public isDescriptorLocked;\\n\\n    // Whether the seeder can be updated\\n    bool public isSeederLocked;\\n\\n    // The noun seeds\\n    mapping(uint256 => INounsSeeder.Seed) public seeds;\\n\\n    // The internal noun ID tracker\\n    uint256 private _currentNounId;\\n\\n    // IPFS content hash of contract-level metadata\\n    string private _contractURIHash = 'QmZi1n79FqWt2tTLwCqiy6nLM6xLGRsEPQ5JmReJQKNNzX';\\n\\n    // OpenSea's Proxy Registry\\n    IProxyRegistry public immutable proxyRegistry;\\n\\n    /**\\n     * @notice Require that the minter has not been locked.\\n     */\\n    modifier whenMinterNotLocked() {\\n        require(!isMinterLocked, 'Minter is locked');\\n        _;\\n    }\\n\\n    /**\\n     * @notice Require that the descriptor has not been locked.\\n     */\\n    modifier whenDescriptorNotLocked() {\\n        require(!isDescriptorLocked, 'Descriptor is locked');\\n        _;\\n    }\\n\\n    /**\\n     * @notice Require that the seeder has not been locked.\\n     */\\n    modifier whenSeederNotLocked() {\\n        require(!isSeederLocked, 'Seeder is locked');\\n        _;\\n    }\\n\\n    /**\\n     * @notice Require that the sender is the nounders DAO.\\n     */\\n    modifier onlyNoundersDAO() {\\n        require(msg.sender == noundersDAO, 'Sender is not the nounders DAO');\\n        _;\\n    }\\n\\n    /**\\n     * @notice Require that the sender is the minter.\\n     */\\n    modifier onlyMinter() {\\n        require(msg.sender == minter, 'Sender is not the minter');\\n        _;\\n    }\\n\\n    constructor(\\n        address _noundersDAO,\\n        address _minter,\\n        INounsDescriptor _descriptor,\\n        INounsSeeder _seeder,\\n        IProxyRegistry _proxyRegistry\\n    ) ERC721('Nouns', 'NOUN') {\\n        noundersDAO = _noundersDAO;\\n        minter = _minter;\\n        descriptor = _descriptor;\\n        seeder = _seeder;\\n        proxyRegistry = _proxyRegistry;\\n    }\\n\\n    /**\\n     * @notice The IPFS URI of contract-level metadata.\\n     */\\n    function contractURI() public view returns (string memory) {\\n        return string(abi.encodePacked('ipfs://', _contractURIHash));\\n    }\\n\\n    /**\\n     * @notice Set the _contractURIHash.\\n     * @dev Only callable by the owner.\\n     */\\n    function setContractURIHash(string memory newContractURIHash) external onlyOwner {\\n        _contractURIHash = newContractURIHash;\\n    }\\n\\n    /**\\n     * @notice Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view override(IERC721, ERC721) returns (bool) {\\n        // Whitelist OpenSea proxy contract for easy trading.\\n        if (proxyRegistry.proxies(owner) == operator) {\\n            return true;\\n        }\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n\\n    /**\\n     * @notice Mint a Noun to the minter, along with a possible nounders reward\\n     * Noun. Nounders reward Nouns are minted every 10 Nouns, starting at 0,\\n     * until 183 nounder Nouns have been minted (5 years w/ 24 hour auctions).\\n     * @dev Call _mintTo with the to address(es).\\n     */\\n    function mint() public override onlyMinter returns (uint256) {\\n        if (_currentNounId <= 1820 && _currentNounId % 10 == 0) {\\n            _mintTo(noundersDAO, _currentNounId++);\\n        }\\n        return _mintTo(minter, _currentNounId++);\\n    }\\n\\n    /**\\n     * @notice Burn a noun.\\n     */\\n    function burn(uint256 nounId) public override onlyMinter {\\n        _burn(nounId);\\n        emit NounBurned(nounId);\\n    }\\n\\n    /**\\n     * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), 'NounsToken: URI query for nonexistent token');\\n        return descriptor.tokenURI(tokenId, seeds[tokenId]);\\n    }\\n\\n    /**\\n     * @notice Similar to `tokenURI`, but always serves a base64 encoded data URI\\n     * with the JSON contents directly inlined.\\n     */\\n    function dataURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), 'NounsToken: URI query for nonexistent token');\\n        return descriptor.dataURI(tokenId, seeds[tokenId]);\\n    }\\n\\n    /**\\n     * @notice Set the nounders DAO.\\n     * @dev Only callable by the nounders DAO when not locked.\\n     */\\n    function setNoundersDAO(address _noundersDAO) external override onlyNoundersDAO {\\n        noundersDAO = _noundersDAO;\\n\\n        emit NoundersDAOUpdated(_noundersDAO);\\n    }\\n\\n    /**\\n     * @notice Set the token minter.\\n     * @dev Only callable by the owner when not locked.\\n     */\\n    function setMinter(address _minter) external override onlyOwner whenMinterNotLocked {\\n        minter = _minter;\\n\\n        emit MinterUpdated(_minter);\\n    }\\n\\n    /**\\n     * @notice Lock the minter.\\n     * @dev This cannot be reversed and is only callable by the owner when not locked.\\n     */\\n    function lockMinter() external override onlyOwner whenMinterNotLocked {\\n        isMinterLocked = true;\\n\\n        emit MinterLocked();\\n    }\\n\\n    /**\\n     * @notice Set the token URI descriptor.\\n     * @dev Only callable by the owner when not locked.\\n     */\\n    function setDescriptor(INounsDescriptor _descriptor) external override onlyOwner whenDescriptorNotLocked {\\n        descriptor = _descriptor;\\n\\n        emit DescriptorUpdated(_descriptor);\\n    }\\n\\n    /**\\n     * @notice Lock the descriptor.\\n     * @dev This cannot be reversed and is only callable by the owner when not locked.\\n     */\\n    function lockDescriptor() external override onlyOwner whenDescriptorNotLocked {\\n        isDescriptorLocked = true;\\n\\n        emit DescriptorLocked();\\n    }\\n\\n    /**\\n     * @notice Set the token seeder.\\n     * @dev Only callable by the owner when not locked.\\n     */\\n    function setSeeder(INounsSeeder _seeder) external override onlyOwner whenSeederNotLocked {\\n        seeder = _seeder;\\n\\n        emit SeederUpdated(_seeder);\\n    }\\n\\n    /**\\n     * @notice Lock the seeder.\\n     * @dev This cannot be reversed and is only callable by the owner when not locked.\\n     */\\n    function lockSeeder() external override onlyOwner whenSeederNotLocked {\\n        isSeederLocked = true;\\n\\n        emit SeederLocked();\\n    }\\n\\n    /**\\n     * @notice Mint a Noun with `nounId` to the provided `to` address.\\n     */\\n    function _mintTo(address to, uint256 nounId) internal returns (uint256) {\\n        INounsSeeder.Seed memory seed = seeds[nounId] = seeder.generateSeed(nounId, descriptor);\\n\\n        _mint(owner(), to, nounId);\\n        emit NounCreated(nounId, seed);\\n\\n        return nounId;\\n    }\\n}\\n\",\"keccak256\":\"0x2b38edc6319d89f14109bf58715053298187700e552c6982e005efcbbf275845\",\"license\":\"GPL-3.0\"},\"contracts/base/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title ERC721 Token Implementation\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\n// LICENSE\\n// ERC721.sol modifies OpenZeppelin's ERC721.sol:\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/6618f9f18424ade44116d0221719f4c93be6a078/contracts/token/ERC721/ERC721.sol\\n//\\n// ERC721.sol source code copyright OpenZeppelin licensed under the MIT License.\\n// With modifications by Nounders DAO.\\n//\\n//\\n// MODIFICATIONS:\\n// `_safeMint` and `_mint` contain an additional `creator` argument and\\n// emit two `Transfer` logs, rather than one. The first log displays the\\n// transfer (mint) from `address(0)` to the `creator`. The second displays the\\n// transfer from the `creator` to the `to` address. This enables correct\\n// attribution on various NFT marketplaces.\\n\\npragma solidity ^0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), 'ERC721: balance query for the zero address');\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), 'ERC721: owner query for nonexistent token');\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, 'ERC721: approval to current owner');\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            'ERC721: approve caller is not owner nor approved for all'\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), 'ERC721: approved query for nonexistent token');\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), 'ERC721: approve to caller');\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), 'ERC721: transfer caller is not owner nor approved');\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), 'ERC721: transfer caller is not owner nor approved');\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), 'ERC721: transfer to non ERC721Receiver implementer');\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), 'ERC721: operator query for nonexistent token');\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId`, transfers it to `to`, and emits two log events -\\n     * 1. Credits the `minter` with the mint.\\n     * 2. Shows transfer from the `minter` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address creator,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        _safeMint(creator, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address creator,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(creator, to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to`, and emits two log events -\\n     * 1. Credits the `creator` with the mint.\\n     * 2. Shows transfer from the `creator` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address creator,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(to != address(0), 'ERC721: mint to the zero address');\\n        require(!_exists(tokenId), 'ERC721: token already minted');\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), creator, tokenId);\\n        emit Transfer(creator, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, 'ERC721: transfer of token that is not own');\\n        require(to != address(0), 'ERC721: transfer to the zero address');\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert('ERC721: transfer to non ERC721Receiver implementer');\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa31e4a28da0102986b6722d2fde96ce59d1f40916e951c706b3f693983b1e54a\",\"license\":\"MIT\"},\"contracts/base/ERC721Checkpointable.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\n/// @title Vote checkpointing for an ERC-721 token\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\n// LICENSE\\n// ERC721Checkpointable.sol uses and modifies part of Compound Lab's Comp.sol:\\n// https://github.com/compound-finance/compound-protocol/blob/ae4388e780a8d596d97619d9704a931a2752c2bc/contracts/Governance/Comp.sol\\n//\\n// Comp.sol source code Copyright 2020 Compound Labs, Inc. licensed under the BSD-3-Clause license.\\n// With modifications by Nounders DAO.\\n//\\n// Additional conditions of BSD-3-Clause can be found here: https://opensource.org/licenses/BSD-3-Clause\\n//\\n// MODIFICATIONS\\n// Checkpointing logic from Comp.sol has been used with the following modifications:\\n// - `delegates` is renamed to `_delegates` and is set to private\\n// - `delegates` is a public function that uses the `_delegates` mapping look-up, but unlike\\n//   Comp.sol, returns the delegator's own address if there is no delegate.\\n//   This avoids the delegator needing to \\\"delegate to self\\\" with an additional transaction\\n// - `_transferTokens()` is renamed `_beforeTokenTransfer()` and adapted to hook into OpenZeppelin's ERC721 hooks.\\n\\npragma solidity ^0.8.6;\\n\\nimport './ERC721Enumerable.sol';\\n\\nabstract contract ERC721Checkpointable is ERC721Enumerable {\\n    /// @notice Defines decimals as per ERC-20 convention to make integrations with 3rd party governance platforms easier\\n    uint8 public constant decimals = 0;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping(address => address) private _delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256('Delegation(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @notice The votes a delegator can delegate, which is the current balance of the delegator.\\n     * @dev Used when calling `_delegate()`\\n     */\\n    function votesToDelegate(address delegator) public view returns (uint96) {\\n        return safe96(balanceOf(delegator), 'ERC721Checkpointable::votesToDelegate: amount exceeds 96 bits');\\n    }\\n\\n    /**\\n     * @notice Overrides the standard `Comp.sol` delegates mapping to return\\n     * the delegator's own address if they haven't delegated.\\n     * This avoids having to delegate to oneself.\\n     */\\n    function delegates(address delegator) public view returns (address) {\\n        address current = _delegates[delegator];\\n        return current == address(0) ? delegator : current;\\n    }\\n\\n    /**\\n     * @notice Adapted from `_transferTokens()` in `Comp.sol` to update delegate votes.\\n     * @dev hooks into OpenZeppelin's `ERC721._transfer`\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        /// @notice Differs from `_transferTokens()` to use `delegates` override method to simulate auto-delegation\\n        _moveDelegates(delegates(from), delegates(to), 1);\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        if (delegatee == address(0)) delegatee = msg.sender;\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this))\\n        );\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), 'ERC721Checkpointable::delegateBySig: invalid signature');\\n        require(nonce == nonces[signatory]++, 'ERC721Checkpointable::delegateBySig: invalid nonce');\\n        require(block.timestamp <= expiry, 'ERC721Checkpointable::delegateBySig: signature expired');\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber) public view returns (uint96) {\\n        require(blockNumber < block.number, 'ERC721Checkpointable::getPriorVotes: not yet determined');\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        /// @notice differs from `_delegate()` in `Comp.sol` to use `delegates` override method to simulate auto-delegation\\n        address currentDelegate = delegates(delegator);\\n\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        uint96 amount = votesToDelegate(delegator);\\n\\n        _moveDelegates(currentDelegate, delegatee, amount);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint96 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint96 srcRepNew = sub96(srcRepOld, amount, 'ERC721Checkpointable::_moveDelegates: amount underflows');\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint96 dstRepNew = add96(dstRepOld, amount, 'ERC721Checkpointable::_moveDelegates: amount overflows');\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint96 oldVotes,\\n        uint96 newVotes\\n    ) internal {\\n        uint32 blockNumber = safe32(\\n            block.number,\\n            'ERC721Checkpointable::_writeCheckpoint: block number exceeds 32 bits'\\n        );\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0xa4891ee574d1958bcfef5f7060b333a7fc93b91e816acf35c50c40b457c09f58\",\"license\":\"BSD-3-Clause\"},\"contracts/base/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title ERC721 Enumerable Extension\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\n// LICENSE\\n// ERC721.sol modifies OpenZeppelin's ERC721Enumerable.sol:\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/6618f9f18424ade44116d0221719f4c93be6a078/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\n//\\n// ERC721Enumerable.sol source code copyright OpenZeppelin licensed under the MIT License.\\n// With modifications by Nounders DAO.\\n//\\n// MODIFICATIONS:\\n// Consumes modified `ERC721` contract. See notes in `ERC721.sol`.\\n\\npragma solidity ^0.8.0;\\n\\nimport './ERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), 'ERC721Enumerable: owner index out of bounds');\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), 'ERC721Enumerable: global index out of bounds');\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xedbccfdf4aacb682de7d3f79dfd5c4c0e07e1e251b57ddd616488b1af8d1884d\",\"license\":\"MIT\"},\"contracts/external/opensea/IProxyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\ninterface IProxyRegistry {\\n    function proxies(address) external view returns (address);\\n}\\n\",\"keccak256\":\"0x491fec42a3943a24760282ae2541e0a128fee0b7ea00da1efc3ac416f39495e4\",\"license\":\"MIT\"},\"contracts/interfaces/INounsDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for NounsDescriptor\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { INounsSeeder } from './INounsSeeder.sol';\\n\\ninterface INounsDescriptor {\\n    event PartsLocked();\\n\\n    event DataURIToggled(bool enabled);\\n\\n    event BaseURIUpdated(string baseURI);\\n\\n    function arePartsLocked() external returns (bool);\\n\\n    function isDataURIEnabled() external returns (bool);\\n\\n    function baseURI() external returns (string memory);\\n\\n    function palettes(uint8 paletteIndex, uint256 colorIndex) external view returns (string memory);\\n\\n    function backgrounds(uint256 index) external view returns (string memory);\\n\\n    function bodies(uint256 index) external view returns (bytes memory);\\n\\n    function accessories(uint256 index) external view returns (bytes memory);\\n\\n    function heads(uint256 index) external view returns (bytes memory);\\n\\n    function glasses(uint256 index) external view returns (bytes memory);\\n\\n    function backgroundCount() external view returns (uint256);\\n\\n    function bodyCount() external view returns (uint256);\\n\\n    function accessoryCount() external view returns (uint256);\\n\\n    function headCount() external view returns (uint256);\\n\\n    function glassesCount() external view returns (uint256);\\n\\n    function addManyColorsToPalette(uint8 paletteIndex, string[] calldata newColors) external;\\n\\n    function addManyBackgrounds(string[] calldata backgrounds) external;\\n\\n    function addManyBodies(bytes[] calldata bodies) external;\\n\\n    function addManyAccessories(bytes[] calldata accessories) external;\\n\\n    function addManyHeads(bytes[] calldata heads) external;\\n\\n    function addManyGlasses(bytes[] calldata glasses) external;\\n\\n    function addColorToPalette(uint8 paletteIndex, string calldata color) external;\\n\\n    function addBackground(string calldata background) external;\\n\\n    function addBody(bytes calldata body) external;\\n\\n    function addAccessory(bytes calldata accessory) external;\\n\\n    function addHead(bytes calldata head) external;\\n\\n    function addGlasses(bytes calldata glasses) external;\\n\\n    function lockParts() external;\\n\\n    function toggleDataURIEnabled() external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function tokenURI(uint256 tokenId, INounsSeeder.Seed memory seed) external view returns (string memory);\\n\\n    function dataURI(uint256 tokenId, INounsSeeder.Seed memory seed) external view returns (string memory);\\n\\n    function genericDataURI(\\n        string calldata name,\\n        string calldata description,\\n        INounsSeeder.Seed memory seed\\n    ) external view returns (string memory);\\n\\n    function generateSVGImage(INounsSeeder.Seed memory seed) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x87bac5321fd5d5cc8c7b4e83cebb68b28ec8ccea25890441f24f21e5349798ef\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INounsSeeder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for NounsSeeder\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { INounsDescriptor } from './INounsDescriptor.sol';\\n\\ninterface INounsSeeder {\\n    struct Seed {\\n        uint48 background;\\n        uint48 body;\\n        uint48 accessory;\\n        uint48 head;\\n        uint48 glasses;\\n    }\\n\\n    function generateSeed(uint256 nounId, INounsDescriptor descriptor) external view returns (Seed memory);\\n}\\n\",\"keccak256\":\"0x1d4912076a8f3c7f01eefe415161590c32efe1a32eb1211a09da6808191c23db\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INounsToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for NounsToken\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { IERC721 } from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport { INounsDescriptor } from './INounsDescriptor.sol';\\nimport { INounsSeeder } from './INounsSeeder.sol';\\n\\ninterface INounsToken is IERC721 {\\n    event NounCreated(uint256 indexed tokenId, INounsSeeder.Seed seed);\\n\\n    event NounBurned(uint256 indexed tokenId);\\n\\n    event NoundersDAOUpdated(address noundersDAO);\\n\\n    event MinterUpdated(address minter);\\n\\n    event MinterLocked();\\n\\n    event DescriptorUpdated(INounsDescriptor descriptor);\\n\\n    event DescriptorLocked();\\n\\n    event SeederUpdated(INounsSeeder seeder);\\n\\n    event SeederLocked();\\n\\n    function mint() external returns (uint256);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function dataURI(uint256 tokenId) external returns (string memory);\\n\\n    function setNoundersDAO(address noundersDAO) external;\\n\\n    function setMinter(address minter) external;\\n\\n    function lockMinter() external;\\n\\n    function setDescriptor(INounsDescriptor descriptor) external;\\n\\n    function lockDescriptor() external;\\n\\n    function setSeeder(INounsSeeder seeder) external;\\n\\n    function lockSeeder() external;\\n}\\n\",\"keccak256\":\"0x91f3536225557259b67a0f0ab569edc768f69a95c4203054ab57fa313ae69a37\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x610100604052602e60a08181529062003bb660c03980516200002a9160159160209091019062000189565b503480156200003857600080fd5b5060405162003be438038062003be48339810160408190526200005b9162000248565b604051806040016040528060058152602001644e6f756e7360d81b815250604051806040016040528060048152602001632727aaa760e11b815250620000b0620000aa6200013560201b60201c565b62000139565b8151620000c590600190602085019062000189565b508051620000db90600290602084019062000189565b5050600f80546001600160a01b03199081166001600160a01b039889161790915560108054821696881696909617909555506011805485169386169390931790925560128054909316908416179091551660805262000304565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546200019790620002c8565b90600052602060002090601f016020900481019282620001bb576000855562000206565b82601f10620001d657805160ff191683800117855562000206565b8280016001018555821562000206579182015b8281111562000206578251825591602001919060010190620001e9565b506200021492915062000218565b5090565b5b8082111562000214576000815560010162000219565b6001600160a01b03811681146200024557600080fd5b50565b600080600080600060a086880312156200026157600080fd5b85516200026e816200022f565b602087015190955062000281816200022f565b604087015190945062000294816200022f565b6060870151909350620002a7816200022f565b6080870151909250620002ba816200022f565b809150509295509295909350565b600181811c90821680620002dd57607f821691505b602082108103620002fe57634e487b7160e01b600052602260045260246000fd5b50919050565b60805161388f620003276000396000818161061b0152611b78015261388f6000f3fe608060405234801561001057600080fd5b506004361061030c5760003560e01c80636fcfff451161019d578063c1b8e4e1116100e9578063e8a3d485116100a2578063f0503e801161007c578063f0503e8014610719578063f1127ed8146107a7578063f2fde38b1461080e578063fca3b5aa1461082157600080fd5b8063e8a3d485146106eb578063e9580e91146106f3578063e985e9c51461070657600080fd5b8063c1b8e4e114610663578063c3cda52014610677578063c87b56dd1461068a578063c8fc0c231461069d578063d50b31eb146106b1578063e7a324dc146106c457600080fd5b80638da5cb5b11610156578063b4b5ea5711610130578063b4b5ea5714610603578063b50cbd9f14610616578063b88d4fde1461063d578063baedc1c41461065057600080fd5b80638da5cb5b146105d757806395d89b41146105e8578063a22cb465146105f057600080fd5b80636fcfff451461052e57806370a0823114610569578063715018a61461057c57806376daebe114610584578063782d6fe11461058c5780637ecebe00146105b757600080fd5b8063303e74df1161025c578063587cde1e116102155780635f295a67116101ef5780635f295a67146104ed5780636352211e146104f5578063655932a414610508578063684931ed1461051b57600080fd5b8063587cde1e146104b45780635ac1e3bb146104c75780635c19a95c146104da57600080fd5b8063303e74df14610446578063313ce5671461045957806341b5d0de1461047357806342842e0e1461047b57806342966c681461048e5780634f6ccce7146104a157600080fd5b8063095ea7b3116102c95780631e688e10116102a35780631e688e10146103e557806320606b70146103f957806323b872dd146104205780632f745c591461043357600080fd5b8063095ea7b3146103b45780631249c58b146103c757806318160ddd146103dd57600080fd5b806301b9a3971461031157806301ffc9a714610326578063058df0ab1461034e57806306fdde03146103615780630754617214610376578063081812fc146103a1575b600080fd5b61032461031f366004612e71565b610834565b005b610339610334366004612ea4565b6108e7565b60405190151581526020015b60405180910390f35b61032461035c366004612e71565b610912565b6103696109ba565b6040516103459190612f19565b601054610389906001600160a01b031681565b6040516001600160a01b039091168152602001610345565b6103896103af366004612f2c565b610a4c565b6103246103c2366004612f45565b610ae1565b6103cf610bf6565b604051908152602001610345565b6009546103cf565b60125461033990600160a01b900460ff1681565b6103cf7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b61032461042e366004612f71565b610cc3565b6103cf610441366004612f45565b610cf4565b601154610389906001600160a01b031681565b610461600081565b60405160ff9091168152602001610345565b610324610d8a565b610324610489366004612f71565b610e21565b61032461049c366004612f2c565b610e3c565b6103cf6104af366004612f2c565b610ec8565b6103896104c2366004612e71565b610f5b565b6103696104d5366004612f2c565b610f8d565b6103246104e8366004612e71565b611049565b610324611067565b610389610503366004612f2c565b6110fa565b600f54610389906001600160a01b031681565b601254610389906001600160a01b031681565b61055461053c366004612e71565b600d6020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610345565b6103cf610577366004612e71565b611171565b6103246111f8565b61032461120c565b61059f61059a366004612f45565b61129f565b6040516001600160601b039091168152602001610345565b6103cf6105c5366004612e71565b600e6020526000908152604090205481565b6000546001600160a01b0316610389565b61036961153f565b6103246105fe366004612fb2565b61154e565b61059f610611366004612e71565b611612565b6103897f000000000000000000000000000000000000000000000000000000000000000081565b61032461064b36600461309d565b61168f565b61032461065e36600461311d565b6116c7565b60125461033990600160a81b900460ff1681565b610324610685366004613166565b6116e6565b610369610698366004612f2c565b6119e4565b60125461033990600160b01b900460ff1681565b6103246106bf366004612e71565b611a5b565b6103cf7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b610369611afe565b61059f610701366004612e71565b611b26565b6103396107143660046131c8565b611b52565b61076e610727366004612f2c565b60136020526000908152604090205465ffffffffffff8082169166010000000000008104821691600160601b8204811691600160901b8104821691600160c01b9091041685565b6040805165ffffffffffff968716815294861660208601529285169284019290925283166060830152909116608082015260a001610345565b6107ea6107b53660046131f6565b600c60209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6040805163ffffffff90931683526001600160601b03909116602083015201610345565b61032461081c366004612e71565b611c27565b61032461082f366004612e71565b611c9d565b61083c611d40565b601254600160a81b900460ff16156108925760405162461bcd60e51b815260206004820152601460248201527311195cd8dc9a5c1d1bdc881a5cc81b1bd8dad95960621b60448201526064015b60405180910390fd5b601180546001600160a01b0319166001600160a01b0383169081179091556040519081527f6e66ab22238a5471005895947c8f57db923c2a9c9c73180eff80864c21295c1b906020015b60405180910390a150565b60006001600160e01b0319821663780e9d6360e01b148061090c575061090c82611d9a565b92915050565b600f546001600160a01b0316331461096c5760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206973206e6f7420746865206e6f756e646572732044414f00006044820152606401610889565b600f80546001600160a01b0319166001600160a01b0383169081179091556040519081527f3a0b923617f180781f3530e464cb4a8b9393e69f47607e4eb28d61cd87ce968c906020016108dc565b6060600180546109c99061322d565b80601f01602080910402602001604051908101604052809291908181526020018280546109f59061322d565b8015610a425780601f10610a1757610100808354040283529160200191610a42565b820191906000526020600020905b815481529060010190602001808311610a2557829003601f168201915b5050505050905090565b6000818152600360205260408120546001600160a01b0316610ac55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610889565b506000908152600560205260409020546001600160a01b031690565b6000610aec826110fa565b9050806001600160a01b0316836001600160a01b031603610b595760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610889565b336001600160a01b0382161480610b755750610b758133611b52565b610be75760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610889565b610bf18383611dea565b505050565b6010546000906001600160a01b03163314610c4e5760405162461bcd60e51b815260206004820152601860248201527729b2b73232b91034b9903737ba103a34329036b4b73a32b960411b6044820152606401610889565b61071c60145411158015610c6e5750600a601454610c6c919061327d565b155b15610c9e57600f5460148054610c9c926001600160a01b0316916000610c93836132a7565b91905055611e58565b505b60105460148054610cbe926001600160a01b0316916000610c93836132a7565b905090565b610ccd3382612054565b610ce95760405162461bcd60e51b8152600401610889906132c0565b610bf183838361212b565b6000610cff83611171565b8210610d615760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610889565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b610d92611d40565b601254600160a81b900460ff1615610de35760405162461bcd60e51b815260206004820152601460248201527311195cd8dc9a5c1d1bdc881a5cc81b1bd8dad95960621b6044820152606401610889565b6012805460ff60a81b1916600160a81b1790556040517f593e31e306c198bef259d839f7c6dc4ff7fc10c07f76fab193a210b03704105f90600090a1565b610bf18383836040518060200160405280600081525061168f565b6010546001600160a01b03163314610e915760405162461bcd60e51b815260206004820152601860248201527729b2b73232b91034b9903737ba103a34329036b4b73a32b960411b6044820152606401610889565b610e9a816122c4565b60405181907f806be94a2ac8b92d74e99aa8add5a8e54528a01ec914a9e00d201a6480ed986390600090a250565b6000610ed360095490565b8210610f365760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610889565b60098281548110610f4957610f49613311565b90600052602060002001549050919050565b6001600160a01b038082166000908152600b60205260408120549091168015610f845780610f86565b825b9392505050565b6000818152600360205260409020546060906001600160a01b0316610fc45760405162461bcd60e51b815260040161088990613327565b601154600083815260136020526040908190209051630638ac2760e41b81526001600160a01b039092169163638ac2709161100491869190600401613372565b600060405180830381865afa158015611021573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261090c91908101906133b7565b6001600160a01b03811661105a5750335b6110643382612359565b50565b61106f611d40565b601254600160b01b900460ff16156110bc5760405162461bcd60e51b815260206004820152601060248201526f14d95959195c881a5cc81b1bd8dad95960821b6044820152606401610889565b6012805460ff60b01b1916600160b01b1790556040517ff59561f22794afcfb1e6be5c4733f5449fd167252a96b74bb06d341fb0dac7ed90600090a1565b6000818152600360205260408120546001600160a01b03168061090c5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610889565b60006001600160a01b0382166111dc5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610889565b506001600160a01b031660009081526004602052604090205490565b611200611d40565b61120a60006123d9565b565b611214611d40565b601254600160a01b900460ff16156112615760405162461bcd60e51b815260206004820152601060248201526f135a5b9d195c881a5cc81b1bd8dad95960821b6044820152606401610889565b6012805460ff60a01b1916600160a01b1790556040517f192417b3f16b1ce69e0c59b0376549666650245ffc05e4b2569089dda8589b6690600090a1565b60004382106113165760405162461bcd60e51b815260206004820152603760248201527f455243373231436865636b706f696e7461626c653a3a6765745072696f72566f60448201527f7465733a206e6f74207965742064657465726d696e65640000000000000000006064820152608401610889565b6001600160a01b0383166000908152600d602052604081205463ffffffff169081900361134757600091505061090c565b6001600160a01b0384166000908152600c60205260408120849161136c60018561342e565b63ffffffff908116825260208201929092526040016000205416116113df576001600160a01b0384166000908152600c60205260408120906113af60018461342e565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b0316915061090c9050565b6001600160a01b0384166000908152600c6020908152604080832083805290915290205463ffffffff1683101561141a57600091505061090c565b60008061142860018461342e565b90505b8163ffffffff168163ffffffff1611156114fa576000600261144d848461342e565b6114579190613453565b611461908361342e565b6001600160a01b0388166000908152600c6020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b0316918101919091529192508790036114ce5760200151945061090c9350505050565b805163ffffffff168711156114e5578193506114f3565b6114f060018361342e565b92505b505061142b565b506001600160a01b0385166000908152600c6020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b6060600280546109c99061322d565b336001600160a01b038316036115a65760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610889565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6001600160a01b0381166000908152600d602052604081205463ffffffff168061163d576000610f86565b6001600160a01b0383166000908152600c602052604081209061166160018461342e565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03169392505050565b6116993383612054565b6116b55760405162461bcd60e51b8152600401610889906132c0565b6116c184848484612429565b50505050565b6116cf611d40565b80516116e2906015906020840190612dc3565b5050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666117116109ba565b8051906020012061171f4690565b60408051602080820195909552808201939093526060830191909152306080808401919091528151808403909101815260a0830182528051908401207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08401526001600160a01b038b1660e084015261010083018a90526101208084018a90528251808503909101815261014084019092528151919093012061190160f01b610160830152610162820183905261018282018190529192506000906101a20160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa15801561184b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166118cd5760405162461bcd60e51b815260206004820152603660248201527f455243373231436865636b706f696e7461626c653a3a64656c656761746542796044820152755369673a20696e76616c6964207369676e617475726560501b6064820152608401610889565b6001600160a01b0381166000908152600e602052604081208054916118f1836132a7565b91905055891461195e5760405162461bcd60e51b815260206004820152603260248201527f455243373231436865636b706f696e7461626c653a3a64656c656761746542796044820152715369673a20696e76616c6964206e6f6e636560701b6064820152608401610889565b874211156119cd5760405162461bcd60e51b815260206004820152603660248201527f455243373231436865636b706f696e7461626c653a3a64656c6567617465427960448201527514da59ce881cda59db985d1d5c9948195e1c1a5c995960521b6064820152608401610889565b6119d7818b612359565b505050505b505050505050565b6000818152600360205260409020546060906001600160a01b0316611a1b5760405162461bcd60e51b815260040161088990613327565b601154600083815260136020526040908190209051633cfdafd360e01b81526001600160a01b0390921691633cfdafd39161100491869190600401613372565b611a63611d40565b601254600160b01b900460ff1615611ab05760405162461bcd60e51b815260206004820152601060248201526f14d95959195c881a5cc81b1bd8dad95960821b6044820152606401610889565b601280546001600160a01b0319166001600160a01b0383169081179091556040519081527fb3025222d01ce9a26c7f9d52bc3bfd0352366bd90a793c273fbfe1c81e0e288e906020016108dc565b60606015604051602001611b129190613476565b604051602081830303815290604052905090565b600061090c611b3483611171565b6040518060600160405280603d81526020016137e6603d913961245c565b60405163c455279160e01b81526001600160a01b038381166004830152600091818416917f0000000000000000000000000000000000000000000000000000000000000000169063c455279190602401602060405180830381865afa158015611bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be3919061352a565b6001600160a01b031603611bf95750600161090c565b6001600160a01b0380841660009081526006602090815260408083209386168352929052205460ff16610f86565b611c2f611d40565b6001600160a01b038116611c945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610889565b611064816123d9565b611ca5611d40565b601254600160a01b900460ff1615611cf25760405162461bcd60e51b815260206004820152601060248201526f135a5b9d195c881a5cc81b1bd8dad95960821b6044820152606401610889565b601080546001600160a01b0319166001600160a01b0383169081179091556040519081527fad0f299ec81a386c98df0ac27dae11dd020ed1b56963c53a7292e7a3a314539a906020016108dc565b6000546001600160a01b0316331461120a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610889565b60006001600160e01b031982166380ac58cd60e01b1480611dcb57506001600160e01b03198216635b5e139f60e01b145b8061090c57506301ffc9a760e01b6001600160e01b031983161461090c565b600081815260056020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611e1f826110fa565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60125460115460405163422e2e9960e01b8152600481018490526001600160a01b0391821660248201526000928392169063422e2e999060440160a060405180830381865afa158015611eaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed39190613562565b60008481526013602090815260408083208451815486850151878501516060808a015160809a8b015165ffffffffffff9687166bffffffffffffffffffffffff199096169590951766010000000000009487168502176bffffffffffffffffffffffff60601b1916600160601b938716840265ffffffffffff60901b191617600160901b91871682021765ffffffffffff60c01b198116600160c01b968816870290811798899055895160a081018b52918816908816178152938704861698840198909852908504841695820195909552948304821693850193909352919004169281019290925254909150611fd3906001600160a01b0316858561248b565b827f1106ee9d020bfbb5ee34cf5535a5fbf024a011bd130078088cbf124ab3092478826040516120449190815165ffffffffffff9081168252602080840151821690830152604080840151821690830152606080840151821690830152608092830151169181019190915260a00190565b60405180910390a2509092915050565b6000818152600360205260408120546001600160a01b03166120cd5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610889565b60006120d8836110fa565b9050806001600160a01b0316846001600160a01b031614806121135750836001600160a01b031661210884610a4c565b6001600160a01b0316145b8061212357506121238185611b52565b949350505050565b826001600160a01b031661213e826110fa565b6001600160a01b0316146121a65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610889565b6001600160a01b0382166122085760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610889565b6122138383836125fd565b61221e600082611dea565b6001600160a01b03831660009081526004602052604081208054600192906122479084906135f0565b90915550506001600160a01b0382166000908152600460205260408120805460019290612275908490613607565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716916000805160206137c683398151915291a4505050565b60006122cf826110fa565b90506122dd816000846125fd565b6122e8600083611dea565b6001600160a01b03811660009081526004602052604081208054600192906123119084906135f0565b909155505060008281526003602052604080822080546001600160a01b0319169055518391906001600160a01b038416906000805160206137c6833981519152908390a45050565b600061236483610f5b565b6001600160a01b038481166000818152600b602052604080822080546001600160a01b031916888616908117909155905194955093928516927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a460006123cc84611b26565b90506116c1828483612620565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61243484848461212b565b612440848484846127cc565b6116c15760405162461bcd60e51b81526004016108899061361f565b600081600160601b84106124835760405162461bcd60e51b81526004016108899190612f19565b509192915050565b6001600160a01b0382166124e15760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610889565b6000818152600360205260409020546001600160a01b0316156125465760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610889565b612552600083836125fd565b6001600160a01b038216600090815260046020526040812080546001929061257b908490613607565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03868116919091179091559051839291861691906000805160206137c6833981519152908290a480826001600160a01b0316846001600160a01b03166000805160206137c683398151915260405160405180910390a4505050565b6126088383836128cd565b610bf161261484610f5b565b61261d84610f5b565b60015b816001600160a01b0316836001600160a01b03161415801561264b57506000816001600160601b0316115b15610bf1576001600160a01b03831615612710576001600160a01b0383166000908152600d602052604081205463ffffffff16908161268b5760006126d7565b6001600160a01b0385166000908152600c60205260408120906126af60018561342e565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b905060006126fe828560405180606001604052806037815260200161382360379139612985565b905061270c868484846129c7565b5050505b6001600160a01b03821615610bf1576001600160a01b0382166000908152600d602052604081205463ffffffff16908161274b576000612797565b6001600160a01b0384166000908152600c602052604081209061276f60018561342e565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b905060006127be828560405180606001604052806036815260200161374c60369139612bbf565b90506119dc858484846129c7565b60006001600160a01b0384163b156128c257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612810903390899088908890600401613671565b6020604051808303816000875af192505050801561284b575060408051601f3d908101601f19168201909252612848918101906136ae565b60015b6128a8573d808015612879576040519150601f19603f3d011682016040523d82523d6000602084013e61287e565b606091505b5080516000036128a05760405162461bcd60e51b81526004016108899061361f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612123565b506001949350505050565b6001600160a01b0383166129285761292381600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b61294b565b816001600160a01b0316836001600160a01b03161461294b5761294b8382612c0c565b6001600160a01b03821661296257610bf181612ca9565b826001600160a01b0316826001600160a01b031614610bf157610bf18282612d58565b6000836001600160601b0316836001600160601b0316111582906129bc5760405162461bcd60e51b81526004016108899190612f19565b5061212383856136cb565b60006129eb4360405180608001604052806044815260200161378260449139612d9c565b905060008463ffffffff16118015612a4557506001600160a01b0385166000908152600c6020526040812063ffffffff831691612a2960018861342e565b63ffffffff908116825260208201929092526040016000205416145b15612ab9576001600160a01b0385166000908152600c602052604081208391612a6f60018861342e565b63ffffffff168152602081019190915260400160002080546001600160601b0392909216600160201b026fffffffffffffffffffffffff0000000019909216919091179055612b6a565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000908152600c82528681208b8616825290915294909420925183549451909116600160201b026fffffffffffffffffffffffffffffffff19909416911617919091179055612b398460016136eb565b6001600160a01b0386166000908152600d60205260409020805463ffffffff191663ffffffff929092169190911790555b604080516001600160601b038086168252841660208201526001600160a01b038716917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a25050505050565b600080612bcc8486613713565b9050846001600160601b0316816001600160601b031610158390612c035760405162461bcd60e51b81526004016108899190612f19565b50949350505050565b60006001612c1984611171565b612c2391906135f0565b600083815260086020526040902054909150808214612c76576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b600954600090612cbb906001906135f0565b6000838152600a602052604081205460098054939450909284908110612ce357612ce3613311565b906000526020600020015490508060098381548110612d0457612d04613311565b6000918252602080832090910192909255828152600a90915260408082208490558582528120556009805480612d3c57612d3c613735565b6001900381819060005260206000200160009055905550505050565b6000612d6383611171565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b600081600160201b84106124835760405162461bcd60e51b81526004016108899190612f19565b828054612dcf9061322d565b90600052602060002090601f016020900481019282612df15760008555612e37565b82601f10612e0a57805160ff1916838001178555612e37565b82800160010185558215612e37579182015b82811115612e37578251825591602001919060010190612e1c565b50612e43929150612e47565b5090565b5b80821115612e435760008155600101612e48565b6001600160a01b038116811461106457600080fd5b600060208284031215612e8357600080fd5b8135610f8681612e5c565b6001600160e01b03198116811461106457600080fd5b600060208284031215612eb657600080fd5b8135610f8681612e8e565b60005b83811015612edc578181015183820152602001612ec4565b838111156116c15750506000910152565b60008151808452612f05816020860160208601612ec1565b601f01601f19169290920160200192915050565b602081526000610f866020830184612eed565b600060208284031215612f3e57600080fd5b5035919050565b60008060408385031215612f5857600080fd5b8235612f6381612e5c565b946020939093013593505050565b600080600060608486031215612f8657600080fd5b8335612f9181612e5c565b92506020840135612fa181612e5c565b929592945050506040919091013590565b60008060408385031215612fc557600080fd5b8235612fd081612e5c565b915060208301358015158114612fe557600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561302f5761302f612ff0565b604052919050565b600067ffffffffffffffff82111561305157613051612ff0565b50601f01601f191660200190565b600061307261306d84613037565b613006565b905082815283838301111561308657600080fd5b828260208301376000602084830101529392505050565b600080600080608085870312156130b357600080fd5b84356130be81612e5c565b935060208501356130ce81612e5c565b925060408501359150606085013567ffffffffffffffff8111156130f157600080fd5b8501601f8101871361310257600080fd5b6131118782356020840161305f565b91505092959194509250565b60006020828403121561312f57600080fd5b813567ffffffffffffffff81111561314657600080fd5b8201601f8101841361315757600080fd5b6121238482356020840161305f565b60008060008060008060c0878903121561317f57600080fd5b863561318a81612e5c565b95506020870135945060408701359350606087013560ff811681146131ae57600080fd5b9598949750929560808101359460a0909101359350915050565b600080604083850312156131db57600080fd5b82356131e681612e5c565b91506020830135612fe581612e5c565b6000806040838503121561320957600080fd5b823561321481612e5c565b9150602083013563ffffffff81168114612fe557600080fd5b600181811c9082168061324157607f821691505b60208210810361326157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601260045260246000fd5b60008261328c5761328c613267565b500690565b634e487b7160e01b600052601160045260246000fd5b6000600182016132b9576132b9613291565b5060010190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252602b908201527f4e6f756e73546f6b656e3a2055524920717565727920666f72206e6f6e65786960408201526a39ba32b73a103a37b5b2b760a91b606082015260800190565b9182525465ffffffffffff8082166020840152603082901c81166040840152606082811c821690840152609082901c8116608084015260c091821c1660a08301520190565b6000602082840312156133c957600080fd5b815167ffffffffffffffff8111156133e057600080fd5b8201601f810184136133f157600080fd5b80516133ff61306d82613037565b81815285602083850101111561341457600080fd5b613425826020830160208601612ec1565b95945050505050565b600063ffffffff8381169083168181101561344b5761344b613291565b039392505050565b600063ffffffff8084168061346a5761346a613267565b92169190910492915050565b66697066733a2f2f60c81b8152600060076000845481600182811c9150808316806134a257607f831692505b602080841082036134c157634e487b7160e01b86526022600452602486fd5b8180156134d557600181146134ea5761351b565b60ff1986168a890152848a018801965061351b565b60008b81526020902060005b868110156135115781548c82018b01529085019083016134f6565b505087858b010196505b50949998505050505050505050565b60006020828403121561353c57600080fd5b8151610f8681612e5c565b805165ffffffffffff8116811461355d57600080fd5b919050565b600060a0828403121561357457600080fd5b60405160a0810181811067ffffffffffffffff8211171561359757613597612ff0565b6040526135a383613547565b81526135b160208401613547565b60208201526135c260408401613547565b60408201526135d360608401613547565b60608201526135e460808401613547565b60808201529392505050565b60008282101561360257613602613291565b500390565b6000821982111561361a5761361a613291565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906136a490830184612eed565b9695505050505050565b6000602082840312156136c057600080fd5b8151610f8681612e8e565b60006001600160601b038381169083168181101561344b5761344b613291565b600063ffffffff80831681851680830382111561370a5761370a613291565b01949350505050565b60006001600160601b0380831681851680830382111561370a5761370a613291565b634e487b7160e01b600052603160045260246000fdfe455243373231436865636b706f696e7461626c653a3a5f6d6f766544656c6567617465733a20616d6f756e74206f766572666c6f7773455243373231436865636b706f696e7461626c653a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef455243373231436865636b706f696e7461626c653a3a766f746573546f44656c65676174653a20616d6f756e7420657863656564732039362062697473455243373231436865636b706f696e7461626c653a3a5f6d6f766544656c6567617465733a20616d6f756e7420756e646572666c6f7773a2646970667358221220fe0c0160ee38382238fb46aaf0faafc8747a0422d381301ca9cb74317045047464736f6c634300080d0033516d5a69316e3739467157743274544c7743716979366e4c4d36784c475273455051354a6d52654a514b4e4e7a58",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061030c5760003560e01c80636fcfff451161019d578063c1b8e4e1116100e9578063e8a3d485116100a2578063f0503e801161007c578063f0503e8014610719578063f1127ed8146107a7578063f2fde38b1461080e578063fca3b5aa1461082157600080fd5b8063e8a3d485146106eb578063e9580e91146106f3578063e985e9c51461070657600080fd5b8063c1b8e4e114610663578063c3cda52014610677578063c87b56dd1461068a578063c8fc0c231461069d578063d50b31eb146106b1578063e7a324dc146106c457600080fd5b80638da5cb5b11610156578063b4b5ea5711610130578063b4b5ea5714610603578063b50cbd9f14610616578063b88d4fde1461063d578063baedc1c41461065057600080fd5b80638da5cb5b146105d757806395d89b41146105e8578063a22cb465146105f057600080fd5b80636fcfff451461052e57806370a0823114610569578063715018a61461057c57806376daebe114610584578063782d6fe11461058c5780637ecebe00146105b757600080fd5b8063303e74df1161025c578063587cde1e116102155780635f295a67116101ef5780635f295a67146104ed5780636352211e146104f5578063655932a414610508578063684931ed1461051b57600080fd5b8063587cde1e146104b45780635ac1e3bb146104c75780635c19a95c146104da57600080fd5b8063303e74df14610446578063313ce5671461045957806341b5d0de1461047357806342842e0e1461047b57806342966c681461048e5780634f6ccce7146104a157600080fd5b8063095ea7b3116102c95780631e688e10116102a35780631e688e10146103e557806320606b70146103f957806323b872dd146104205780632f745c591461043357600080fd5b8063095ea7b3146103b45780631249c58b146103c757806318160ddd146103dd57600080fd5b806301b9a3971461031157806301ffc9a714610326578063058df0ab1461034e57806306fdde03146103615780630754617214610376578063081812fc146103a1575b600080fd5b61032461031f366004612e71565b610834565b005b610339610334366004612ea4565b6108e7565b60405190151581526020015b60405180910390f35b61032461035c366004612e71565b610912565b6103696109ba565b6040516103459190612f19565b601054610389906001600160a01b031681565b6040516001600160a01b039091168152602001610345565b6103896103af366004612f2c565b610a4c565b6103246103c2366004612f45565b610ae1565b6103cf610bf6565b604051908152602001610345565b6009546103cf565b60125461033990600160a01b900460ff1681565b6103cf7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b61032461042e366004612f71565b610cc3565b6103cf610441366004612f45565b610cf4565b601154610389906001600160a01b031681565b610461600081565b60405160ff9091168152602001610345565b610324610d8a565b610324610489366004612f71565b610e21565b61032461049c366004612f2c565b610e3c565b6103cf6104af366004612f2c565b610ec8565b6103896104c2366004612e71565b610f5b565b6103696104d5366004612f2c565b610f8d565b6103246104e8366004612e71565b611049565b610324611067565b610389610503366004612f2c565b6110fa565b600f54610389906001600160a01b031681565b601254610389906001600160a01b031681565b61055461053c366004612e71565b600d6020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610345565b6103cf610577366004612e71565b611171565b6103246111f8565b61032461120c565b61059f61059a366004612f45565b61129f565b6040516001600160601b039091168152602001610345565b6103cf6105c5366004612e71565b600e6020526000908152604090205481565b6000546001600160a01b0316610389565b61036961153f565b6103246105fe366004612fb2565b61154e565b61059f610611366004612e71565b611612565b6103897f000000000000000000000000000000000000000000000000000000000000000081565b61032461064b36600461309d565b61168f565b61032461065e36600461311d565b6116c7565b60125461033990600160a81b900460ff1681565b610324610685366004613166565b6116e6565b610369610698366004612f2c565b6119e4565b60125461033990600160b01b900460ff1681565b6103246106bf366004612e71565b611a5b565b6103cf7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b610369611afe565b61059f610701366004612e71565b611b26565b6103396107143660046131c8565b611b52565b61076e610727366004612f2c565b60136020526000908152604090205465ffffffffffff8082169166010000000000008104821691600160601b8204811691600160901b8104821691600160c01b9091041685565b6040805165ffffffffffff968716815294861660208601529285169284019290925283166060830152909116608082015260a001610345565b6107ea6107b53660046131f6565b600c60209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6040805163ffffffff90931683526001600160601b03909116602083015201610345565b61032461081c366004612e71565b611c27565b61032461082f366004612e71565b611c9d565b61083c611d40565b601254600160a81b900460ff16156108925760405162461bcd60e51b815260206004820152601460248201527311195cd8dc9a5c1d1bdc881a5cc81b1bd8dad95960621b60448201526064015b60405180910390fd5b601180546001600160a01b0319166001600160a01b0383169081179091556040519081527f6e66ab22238a5471005895947c8f57db923c2a9c9c73180eff80864c21295c1b906020015b60405180910390a150565b60006001600160e01b0319821663780e9d6360e01b148061090c575061090c82611d9a565b92915050565b600f546001600160a01b0316331461096c5760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206973206e6f7420746865206e6f756e646572732044414f00006044820152606401610889565b600f80546001600160a01b0319166001600160a01b0383169081179091556040519081527f3a0b923617f180781f3530e464cb4a8b9393e69f47607e4eb28d61cd87ce968c906020016108dc565b6060600180546109c99061322d565b80601f01602080910402602001604051908101604052809291908181526020018280546109f59061322d565b8015610a425780601f10610a1757610100808354040283529160200191610a42565b820191906000526020600020905b815481529060010190602001808311610a2557829003601f168201915b5050505050905090565b6000818152600360205260408120546001600160a01b0316610ac55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610889565b506000908152600560205260409020546001600160a01b031690565b6000610aec826110fa565b9050806001600160a01b0316836001600160a01b031603610b595760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610889565b336001600160a01b0382161480610b755750610b758133611b52565b610be75760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610889565b610bf18383611dea565b505050565b6010546000906001600160a01b03163314610c4e5760405162461bcd60e51b815260206004820152601860248201527729b2b73232b91034b9903737ba103a34329036b4b73a32b960411b6044820152606401610889565b61071c60145411158015610c6e5750600a601454610c6c919061327d565b155b15610c9e57600f5460148054610c9c926001600160a01b0316916000610c93836132a7565b91905055611e58565b505b60105460148054610cbe926001600160a01b0316916000610c93836132a7565b905090565b610ccd3382612054565b610ce95760405162461bcd60e51b8152600401610889906132c0565b610bf183838361212b565b6000610cff83611171565b8210610d615760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610889565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b610d92611d40565b601254600160a81b900460ff1615610de35760405162461bcd60e51b815260206004820152601460248201527311195cd8dc9a5c1d1bdc881a5cc81b1bd8dad95960621b6044820152606401610889565b6012805460ff60a81b1916600160a81b1790556040517f593e31e306c198bef259d839f7c6dc4ff7fc10c07f76fab193a210b03704105f90600090a1565b610bf18383836040518060200160405280600081525061168f565b6010546001600160a01b03163314610e915760405162461bcd60e51b815260206004820152601860248201527729b2b73232b91034b9903737ba103a34329036b4b73a32b960411b6044820152606401610889565b610e9a816122c4565b60405181907f806be94a2ac8b92d74e99aa8add5a8e54528a01ec914a9e00d201a6480ed986390600090a250565b6000610ed360095490565b8210610f365760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610889565b60098281548110610f4957610f49613311565b90600052602060002001549050919050565b6001600160a01b038082166000908152600b60205260408120549091168015610f845780610f86565b825b9392505050565b6000818152600360205260409020546060906001600160a01b0316610fc45760405162461bcd60e51b815260040161088990613327565b601154600083815260136020526040908190209051630638ac2760e41b81526001600160a01b039092169163638ac2709161100491869190600401613372565b600060405180830381865afa158015611021573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261090c91908101906133b7565b6001600160a01b03811661105a5750335b6110643382612359565b50565b61106f611d40565b601254600160b01b900460ff16156110bc5760405162461bcd60e51b815260206004820152601060248201526f14d95959195c881a5cc81b1bd8dad95960821b6044820152606401610889565b6012805460ff60b01b1916600160b01b1790556040517ff59561f22794afcfb1e6be5c4733f5449fd167252a96b74bb06d341fb0dac7ed90600090a1565b6000818152600360205260408120546001600160a01b03168061090c5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610889565b60006001600160a01b0382166111dc5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610889565b506001600160a01b031660009081526004602052604090205490565b611200611d40565b61120a60006123d9565b565b611214611d40565b601254600160a01b900460ff16156112615760405162461bcd60e51b815260206004820152601060248201526f135a5b9d195c881a5cc81b1bd8dad95960821b6044820152606401610889565b6012805460ff60a01b1916600160a01b1790556040517f192417b3f16b1ce69e0c59b0376549666650245ffc05e4b2569089dda8589b6690600090a1565b60004382106113165760405162461bcd60e51b815260206004820152603760248201527f455243373231436865636b706f696e7461626c653a3a6765745072696f72566f60448201527f7465733a206e6f74207965742064657465726d696e65640000000000000000006064820152608401610889565b6001600160a01b0383166000908152600d602052604081205463ffffffff169081900361134757600091505061090c565b6001600160a01b0384166000908152600c60205260408120849161136c60018561342e565b63ffffffff908116825260208201929092526040016000205416116113df576001600160a01b0384166000908152600c60205260408120906113af60018461342e565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b0316915061090c9050565b6001600160a01b0384166000908152600c6020908152604080832083805290915290205463ffffffff1683101561141a57600091505061090c565b60008061142860018461342e565b90505b8163ffffffff168163ffffffff1611156114fa576000600261144d848461342e565b6114579190613453565b611461908361342e565b6001600160a01b0388166000908152600c6020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b0316918101919091529192508790036114ce5760200151945061090c9350505050565b805163ffffffff168711156114e5578193506114f3565b6114f060018361342e565b92505b505061142b565b506001600160a01b0385166000908152600c6020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b6060600280546109c99061322d565b336001600160a01b038316036115a65760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610889565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6001600160a01b0381166000908152600d602052604081205463ffffffff168061163d576000610f86565b6001600160a01b0383166000908152600c602052604081209061166160018461342e565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03169392505050565b6116993383612054565b6116b55760405162461bcd60e51b8152600401610889906132c0565b6116c184848484612429565b50505050565b6116cf611d40565b80516116e2906015906020840190612dc3565b5050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666117116109ba565b8051906020012061171f4690565b60408051602080820195909552808201939093526060830191909152306080808401919091528151808403909101815260a0830182528051908401207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08401526001600160a01b038b1660e084015261010083018a90526101208084018a90528251808503909101815261014084019092528151919093012061190160f01b610160830152610162820183905261018282018190529192506000906101a20160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa15801561184b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166118cd5760405162461bcd60e51b815260206004820152603660248201527f455243373231436865636b706f696e7461626c653a3a64656c656761746542796044820152755369673a20696e76616c6964207369676e617475726560501b6064820152608401610889565b6001600160a01b0381166000908152600e602052604081208054916118f1836132a7565b91905055891461195e5760405162461bcd60e51b815260206004820152603260248201527f455243373231436865636b706f696e7461626c653a3a64656c656761746542796044820152715369673a20696e76616c6964206e6f6e636560701b6064820152608401610889565b874211156119cd5760405162461bcd60e51b815260206004820152603660248201527f455243373231436865636b706f696e7461626c653a3a64656c6567617465427960448201527514da59ce881cda59db985d1d5c9948195e1c1a5c995960521b6064820152608401610889565b6119d7818b612359565b505050505b505050505050565b6000818152600360205260409020546060906001600160a01b0316611a1b5760405162461bcd60e51b815260040161088990613327565b601154600083815260136020526040908190209051633cfdafd360e01b81526001600160a01b0390921691633cfdafd39161100491869190600401613372565b611a63611d40565b601254600160b01b900460ff1615611ab05760405162461bcd60e51b815260206004820152601060248201526f14d95959195c881a5cc81b1bd8dad95960821b6044820152606401610889565b601280546001600160a01b0319166001600160a01b0383169081179091556040519081527fb3025222d01ce9a26c7f9d52bc3bfd0352366bd90a793c273fbfe1c81e0e288e906020016108dc565b60606015604051602001611b129190613476565b604051602081830303815290604052905090565b600061090c611b3483611171565b6040518060600160405280603d81526020016137e6603d913961245c565b60405163c455279160e01b81526001600160a01b038381166004830152600091818416917f0000000000000000000000000000000000000000000000000000000000000000169063c455279190602401602060405180830381865afa158015611bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be3919061352a565b6001600160a01b031603611bf95750600161090c565b6001600160a01b0380841660009081526006602090815260408083209386168352929052205460ff16610f86565b611c2f611d40565b6001600160a01b038116611c945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610889565b611064816123d9565b611ca5611d40565b601254600160a01b900460ff1615611cf25760405162461bcd60e51b815260206004820152601060248201526f135a5b9d195c881a5cc81b1bd8dad95960821b6044820152606401610889565b601080546001600160a01b0319166001600160a01b0383169081179091556040519081527fad0f299ec81a386c98df0ac27dae11dd020ed1b56963c53a7292e7a3a314539a906020016108dc565b6000546001600160a01b0316331461120a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610889565b60006001600160e01b031982166380ac58cd60e01b1480611dcb57506001600160e01b03198216635b5e139f60e01b145b8061090c57506301ffc9a760e01b6001600160e01b031983161461090c565b600081815260056020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611e1f826110fa565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60125460115460405163422e2e9960e01b8152600481018490526001600160a01b0391821660248201526000928392169063422e2e999060440160a060405180830381865afa158015611eaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed39190613562565b60008481526013602090815260408083208451815486850151878501516060808a015160809a8b015165ffffffffffff9687166bffffffffffffffffffffffff199096169590951766010000000000009487168502176bffffffffffffffffffffffff60601b1916600160601b938716840265ffffffffffff60901b191617600160901b91871682021765ffffffffffff60c01b198116600160c01b968816870290811798899055895160a081018b52918816908816178152938704861698840198909852908504841695820195909552948304821693850193909352919004169281019290925254909150611fd3906001600160a01b0316858561248b565b827f1106ee9d020bfbb5ee34cf5535a5fbf024a011bd130078088cbf124ab3092478826040516120449190815165ffffffffffff9081168252602080840151821690830152604080840151821690830152606080840151821690830152608092830151169181019190915260a00190565b60405180910390a2509092915050565b6000818152600360205260408120546001600160a01b03166120cd5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610889565b60006120d8836110fa565b9050806001600160a01b0316846001600160a01b031614806121135750836001600160a01b031661210884610a4c565b6001600160a01b0316145b8061212357506121238185611b52565b949350505050565b826001600160a01b031661213e826110fa565b6001600160a01b0316146121a65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610889565b6001600160a01b0382166122085760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610889565b6122138383836125fd565b61221e600082611dea565b6001600160a01b03831660009081526004602052604081208054600192906122479084906135f0565b90915550506001600160a01b0382166000908152600460205260408120805460019290612275908490613607565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716916000805160206137c683398151915291a4505050565b60006122cf826110fa565b90506122dd816000846125fd565b6122e8600083611dea565b6001600160a01b03811660009081526004602052604081208054600192906123119084906135f0565b909155505060008281526003602052604080822080546001600160a01b0319169055518391906001600160a01b038416906000805160206137c6833981519152908390a45050565b600061236483610f5b565b6001600160a01b038481166000818152600b602052604080822080546001600160a01b031916888616908117909155905194955093928516927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a460006123cc84611b26565b90506116c1828483612620565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61243484848461212b565b612440848484846127cc565b6116c15760405162461bcd60e51b81526004016108899061361f565b600081600160601b84106124835760405162461bcd60e51b81526004016108899190612f19565b509192915050565b6001600160a01b0382166124e15760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610889565b6000818152600360205260409020546001600160a01b0316156125465760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610889565b612552600083836125fd565b6001600160a01b038216600090815260046020526040812080546001929061257b908490613607565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03868116919091179091559051839291861691906000805160206137c6833981519152908290a480826001600160a01b0316846001600160a01b03166000805160206137c683398151915260405160405180910390a4505050565b6126088383836128cd565b610bf161261484610f5b565b61261d84610f5b565b60015b816001600160a01b0316836001600160a01b03161415801561264b57506000816001600160601b0316115b15610bf1576001600160a01b03831615612710576001600160a01b0383166000908152600d602052604081205463ffffffff16908161268b5760006126d7565b6001600160a01b0385166000908152600c60205260408120906126af60018561342e565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b905060006126fe828560405180606001604052806037815260200161382360379139612985565b905061270c868484846129c7565b5050505b6001600160a01b03821615610bf1576001600160a01b0382166000908152600d602052604081205463ffffffff16908161274b576000612797565b6001600160a01b0384166000908152600c602052604081209061276f60018561342e565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b905060006127be828560405180606001604052806036815260200161374c60369139612bbf565b90506119dc858484846129c7565b60006001600160a01b0384163b156128c257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612810903390899088908890600401613671565b6020604051808303816000875af192505050801561284b575060408051601f3d908101601f19168201909252612848918101906136ae565b60015b6128a8573d808015612879576040519150601f19603f3d011682016040523d82523d6000602084013e61287e565b606091505b5080516000036128a05760405162461bcd60e51b81526004016108899061361f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612123565b506001949350505050565b6001600160a01b0383166129285761292381600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b61294b565b816001600160a01b0316836001600160a01b03161461294b5761294b8382612c0c565b6001600160a01b03821661296257610bf181612ca9565b826001600160a01b0316826001600160a01b031614610bf157610bf18282612d58565b6000836001600160601b0316836001600160601b0316111582906129bc5760405162461bcd60e51b81526004016108899190612f19565b5061212383856136cb565b60006129eb4360405180608001604052806044815260200161378260449139612d9c565b905060008463ffffffff16118015612a4557506001600160a01b0385166000908152600c6020526040812063ffffffff831691612a2960018861342e565b63ffffffff908116825260208201929092526040016000205416145b15612ab9576001600160a01b0385166000908152600c602052604081208391612a6f60018861342e565b63ffffffff168152602081019190915260400160002080546001600160601b0392909216600160201b026fffffffffffffffffffffffff0000000019909216919091179055612b6a565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000908152600c82528681208b8616825290915294909420925183549451909116600160201b026fffffffffffffffffffffffffffffffff19909416911617919091179055612b398460016136eb565b6001600160a01b0386166000908152600d60205260409020805463ffffffff191663ffffffff929092169190911790555b604080516001600160601b038086168252841660208201526001600160a01b038716917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a25050505050565b600080612bcc8486613713565b9050846001600160601b0316816001600160601b031610158390612c035760405162461bcd60e51b81526004016108899190612f19565b50949350505050565b60006001612c1984611171565b612c2391906135f0565b600083815260086020526040902054909150808214612c76576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b600954600090612cbb906001906135f0565b6000838152600a602052604081205460098054939450909284908110612ce357612ce3613311565b906000526020600020015490508060098381548110612d0457612d04613311565b6000918252602080832090910192909255828152600a90915260408082208490558582528120556009805480612d3c57612d3c613735565b6001900381819060005260206000200160009055905550505050565b6000612d6383611171565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b600081600160201b84106124835760405162461bcd60e51b81526004016108899190612f19565b828054612dcf9061322d565b90600052602060002090601f016020900481019282612df15760008555612e37565b82601f10612e0a57805160ff1916838001178555612e37565b82800160010185558215612e37579182015b82811115612e37578251825591602001919060010190612e1c565b50612e43929150612e47565b5090565b5b80821115612e435760008155600101612e48565b6001600160a01b038116811461106457600080fd5b600060208284031215612e8357600080fd5b8135610f8681612e5c565b6001600160e01b03198116811461106457600080fd5b600060208284031215612eb657600080fd5b8135610f8681612e8e565b60005b83811015612edc578181015183820152602001612ec4565b838111156116c15750506000910152565b60008151808452612f05816020860160208601612ec1565b601f01601f19169290920160200192915050565b602081526000610f866020830184612eed565b600060208284031215612f3e57600080fd5b5035919050565b60008060408385031215612f5857600080fd5b8235612f6381612e5c565b946020939093013593505050565b600080600060608486031215612f8657600080fd5b8335612f9181612e5c565b92506020840135612fa181612e5c565b929592945050506040919091013590565b60008060408385031215612fc557600080fd5b8235612fd081612e5c565b915060208301358015158114612fe557600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561302f5761302f612ff0565b604052919050565b600067ffffffffffffffff82111561305157613051612ff0565b50601f01601f191660200190565b600061307261306d84613037565b613006565b905082815283838301111561308657600080fd5b828260208301376000602084830101529392505050565b600080600080608085870312156130b357600080fd5b84356130be81612e5c565b935060208501356130ce81612e5c565b925060408501359150606085013567ffffffffffffffff8111156130f157600080fd5b8501601f8101871361310257600080fd5b6131118782356020840161305f565b91505092959194509250565b60006020828403121561312f57600080fd5b813567ffffffffffffffff81111561314657600080fd5b8201601f8101841361315757600080fd5b6121238482356020840161305f565b60008060008060008060c0878903121561317f57600080fd5b863561318a81612e5c565b95506020870135945060408701359350606087013560ff811681146131ae57600080fd5b9598949750929560808101359460a0909101359350915050565b600080604083850312156131db57600080fd5b82356131e681612e5c565b91506020830135612fe581612e5c565b6000806040838503121561320957600080fd5b823561321481612e5c565b9150602083013563ffffffff81168114612fe557600080fd5b600181811c9082168061324157607f821691505b60208210810361326157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601260045260246000fd5b60008261328c5761328c613267565b500690565b634e487b7160e01b600052601160045260246000fd5b6000600182016132b9576132b9613291565b5060010190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252602b908201527f4e6f756e73546f6b656e3a2055524920717565727920666f72206e6f6e65786960408201526a39ba32b73a103a37b5b2b760a91b606082015260800190565b9182525465ffffffffffff8082166020840152603082901c81166040840152606082811c821690840152609082901c8116608084015260c091821c1660a08301520190565b6000602082840312156133c957600080fd5b815167ffffffffffffffff8111156133e057600080fd5b8201601f810184136133f157600080fd5b80516133ff61306d82613037565b81815285602083850101111561341457600080fd5b613425826020830160208601612ec1565b95945050505050565b600063ffffffff8381169083168181101561344b5761344b613291565b039392505050565b600063ffffffff8084168061346a5761346a613267565b92169190910492915050565b66697066733a2f2f60c81b8152600060076000845481600182811c9150808316806134a257607f831692505b602080841082036134c157634e487b7160e01b86526022600452602486fd5b8180156134d557600181146134ea5761351b565b60ff1986168a890152848a018801965061351b565b60008b81526020902060005b868110156135115781548c82018b01529085019083016134f6565b505087858b010196505b50949998505050505050505050565b60006020828403121561353c57600080fd5b8151610f8681612e5c565b805165ffffffffffff8116811461355d57600080fd5b919050565b600060a0828403121561357457600080fd5b60405160a0810181811067ffffffffffffffff8211171561359757613597612ff0565b6040526135a383613547565b81526135b160208401613547565b60208201526135c260408401613547565b60408201526135d360608401613547565b60608201526135e460808401613547565b60808201529392505050565b60008282101561360257613602613291565b500390565b6000821982111561361a5761361a613291565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906136a490830184612eed565b9695505050505050565b6000602082840312156136c057600080fd5b8151610f8681612e8e565b60006001600160601b038381169083168181101561344b5761344b613291565b600063ffffffff80831681851680830382111561370a5761370a613291565b01949350505050565b60006001600160601b0380831681851680830382111561370a5761370a613291565b634e487b7160e01b600052603160045260246000fdfe455243373231436865636b706f696e7461626c653a3a5f6d6f766544656c6567617465733a20616d6f756e74206f766572666c6f7773455243373231436865636b706f696e7461626c653a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef455243373231436865636b706f696e7461626c653a3a766f746573546f44656c65676174653a20616d6f756e7420657863656564732039362062697473455243373231436865636b706f696e7461626c653a3a5f6d6f766544656c6567617465733a20616d6f756e7420756e646572666c6f7773a2646970667358221220fe0c0160ee38382238fb46aaf0faafc8747a0422d381301ca9cb74317045047464736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The address to delegate votes to"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getCurrentVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "getPriorVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "lockDescriptor()": {
        "details": "This cannot be reversed and is only callable by the owner when not locked."
      },
      "lockMinter()": {
        "details": "This cannot be reversed and is only callable by the owner when not locked."
      },
      "lockSeeder()": {
        "details": "This cannot be reversed and is only callable by the owner when not locked."
      },
      "mint()": {
        "details": "Call _mintTo with the to address(es)."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setContractURIHash(string)": {
        "details": "Only callable by the owner."
      },
      "setDescriptor(address)": {
        "details": "Only callable by the owner when not locked."
      },
      "setMinter(address)": {
        "details": "Only callable by the owner when not locked."
      },
      "setNoundersDAO(address)": {
        "details": "Only callable by the nounders DAO when not locked."
      },
      "setSeeder(address)": {
        "details": "Only callable by the owner when not locked."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "votesToDelegate(address)": {
        "details": "Used when calling `_delegate()`"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DelegateChanged(address,address,address)": {
        "notice": "An event thats emitted when an account changes its delegate"
      },
      "DelegateVotesChanged(address,uint256,uint256)": {
        "notice": "An event thats emitted when a delegate account's vote balance changes"
      }
    },
    "kind": "user",
    "methods": {
      "DELEGATION_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the delegation struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "burn(uint256)": {
        "notice": "Burn a noun."
      },
      "checkpoints(address,uint32)": {
        "notice": "A record of votes checkpoints for each account, by index"
      },
      "contractURI()": {
        "notice": "The IPFS URI of contract-level metadata."
      },
      "dataURI(uint256)": {
        "notice": "Similar to `tokenURI`, but always serves a base64 encoded data URI with the JSON contents directly inlined."
      },
      "decimals()": {
        "notice": "Defines decimals as per ERC-20 convention to make integrations with 3rd party governance platforms easier"
      },
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`"
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates votes from signatory to `delegatee`"
      },
      "delegates(address)": {
        "notice": "Overrides the standard `Comp.sol` delegates mapping to return the delegator's own address if they haven't delegated. This avoids having to delegate to oneself."
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "getPriorVotes(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings."
      },
      "lockDescriptor()": {
        "notice": "Lock the descriptor."
      },
      "lockMinter()": {
        "notice": "Lock the minter."
      },
      "lockSeeder()": {
        "notice": "Lock the seeder."
      },
      "mint()": {
        "notice": "Mint a Noun to the minter, along with a possible nounders reward Noun. Nounders reward Nouns are minted every 10 Nouns, starting at 0, until 183 nounder Nouns have been minted (5 years w/ 24 hour auctions)."
      },
      "nonces(address)": {
        "notice": "A record of states for signing / validating signatures"
      },
      "numCheckpoints(address)": {
        "notice": "The number of checkpoints for each account"
      },
      "setContractURIHash(string)": {
        "notice": "Set the _contractURIHash."
      },
      "setDescriptor(address)": {
        "notice": "Set the token URI descriptor."
      },
      "setMinter(address)": {
        "notice": "Set the token minter."
      },
      "setNoundersDAO(address)": {
        "notice": "Set the nounders DAO."
      },
      "setSeeder(address)": {
        "notice": "Set the token seeder."
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      },
      "votesToDelegate(address)": {
        "notice": "The votes a delegator can delegate, which is the current balance of the delegator."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 761,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3702,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3704,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3708,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3712,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3716,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3722,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5284,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 5288,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5291,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "_allTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 5295,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4522,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "_delegates",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4535,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "checkpoints",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)4527_storage))"
      },
      {
        "astId": 4540,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 4557,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "nonces",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3217,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "noundersDAO",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 3219,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "minter",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 3222,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "descriptor",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(INounsDescriptor)5979"
      },
      {
        "astId": 3225,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "seeder",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(INounsSeeder)6006"
      },
      {
        "astId": 3227,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "isMinterLocked",
        "offset": 20,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 3229,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "isDescriptorLocked",
        "offset": 21,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 3231,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "isSeederLocked",
        "offset": 22,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 3236,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "seeds",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_struct(Seed)5994_storage)"
      },
      {
        "astId": 3238,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "_currentNounId",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 3241,
        "contract": "contracts/NounsToken.sol:NounsToken",
        "label": "_contractURIHash",
        "offset": 0,
        "slot": "21",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INounsDescriptor)5979": {
        "encoding": "inplace",
        "label": "contract INounsDescriptor",
        "numberOfBytes": "20"
      },
      "t_contract(INounsSeeder)6006": {
        "encoding": "inplace",
        "label": "contract INounsSeeder",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)4527_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct ERC721Checkpointable.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Checkpoint)4527_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Seed)5994_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct INounsSeeder.Seed)",
        "numberOfBytes": "32",
        "value": "t_struct(Seed)5994_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_struct(Checkpoint)4527_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct ERC721Checkpointable.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)4527_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Checkpoint)4527_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Checkpointable.Checkpoint",
        "members": [
          {
            "astId": 4524,
            "contract": "contracts/NounsToken.sol:NounsToken",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4526,
            "contract": "contracts/NounsToken.sol:NounsToken",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Seed)5994_storage": {
        "encoding": "inplace",
        "label": "struct INounsSeeder.Seed",
        "members": [
          {
            "astId": 5985,
            "contract": "contracts/NounsToken.sol:NounsToken",
            "label": "background",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 5987,
            "contract": "contracts/NounsToken.sol:NounsToken",
            "label": "body",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 5989,
            "contract": "contracts/NounsToken.sol:NounsToken",
            "label": "accessory",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 5991,
            "contract": "contracts/NounsToken.sol:NounsToken",
            "label": "head",
            "offset": 18,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 5993,
            "contract": "contracts/NounsToken.sol:NounsToken",
            "label": "glasses",
            "offset": 24,
            "slot": "0",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}