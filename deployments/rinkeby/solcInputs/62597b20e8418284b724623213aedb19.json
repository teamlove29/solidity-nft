{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/INounsDescriptor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/// @title Interface for NounsDescriptor\n\n/*********************************\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░█████████░░█████████░░░ *\n * ░░░░░░██░░░████░░██░░░████░░░ *\n * ░░██████░░░████████░░░████░░░ *\n * ░░██░░██░░░████░░██░░░████░░░ *\n * ░░██░░██░░░████░░██░░░████░░░ *\n * ░░░░░░█████████░░█████████░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n *********************************/\n\npragma solidity ^0.8.6;\n\nimport { INounsSeeder } from './INounsSeeder.sol';\n\ninterface INounsDescriptor {\n    event PartsLocked();\n\n    event DataURIToggled(bool enabled);\n\n    event BaseURIUpdated(string baseURI);\n\n    function arePartsLocked() external returns (bool);\n\n    function isDataURIEnabled() external returns (bool);\n\n    function baseURI() external returns (string memory);\n\n    function palettes(uint8 paletteIndex, uint256 colorIndex) external view returns (string memory);\n\n    function backgrounds(uint256 index) external view returns (string memory);\n\n    function bodies(uint256 index) external view returns (bytes memory);\n\n    function accessories(uint256 index) external view returns (bytes memory);\n\n    function heads(uint256 index) external view returns (bytes memory);\n\n    function glasses(uint256 index) external view returns (bytes memory);\n\n    function backgroundCount() external view returns (uint256);\n\n    function bodyCount() external view returns (uint256);\n\n    function accessoryCount() external view returns (uint256);\n\n    function headCount() external view returns (uint256);\n\n    function glassesCount() external view returns (uint256);\n\n    function addManyColorsToPalette(uint8 paletteIndex, string[] calldata newColors) external;\n\n    function addManyBackgrounds(string[] calldata backgrounds) external;\n\n    function addManyBodies(bytes[] calldata bodies) external;\n\n    function addManyAccessories(bytes[] calldata accessories) external;\n\n    function addManyHeads(bytes[] calldata heads) external;\n\n    function addManyGlasses(bytes[] calldata glasses) external;\n\n    function addColorToPalette(uint8 paletteIndex, string calldata color) external;\n\n    function addBackground(string calldata background) external;\n\n    function addBody(bytes calldata body) external;\n\n    function addAccessory(bytes calldata accessory) external;\n\n    function addHead(bytes calldata head) external;\n\n    function addGlasses(bytes calldata glasses) external;\n\n    function lockParts() external;\n\n    function toggleDataURIEnabled() external;\n\n    function setBaseURI(string calldata baseURI) external;\n\n    function tokenURI(uint256 tokenId, INounsSeeder.Seed memory seed) external view returns (string memory);\n\n    function dataURI(uint256 tokenId, INounsSeeder.Seed memory seed) external view returns (string memory);\n\n    function genericDataURI(\n        string calldata name,\n        string calldata description,\n        INounsSeeder.Seed memory seed\n    ) external view returns (string memory);\n\n    function generateSVGImage(INounsSeeder.Seed memory seed) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/INounsSeeder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/// @title Interface for NounsSeeder\n\n/*********************************\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░█████████░░█████████░░░ *\n * ░░░░░░██░░░████░░██░░░████░░░ *\n * ░░██████░░░████████░░░████░░░ *\n * ░░██░░██░░░████░░██░░░████░░░ *\n * ░░██░░██░░░████░░██░░░████░░░ *\n * ░░░░░░█████████░░█████████░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n *********************************/\n\npragma solidity ^0.8.6;\n\nimport { INounsDescriptor } from './INounsDescriptor.sol';\n\ninterface INounsSeeder {\n    struct Seed {\n        uint48 background;\n        uint48 body;\n        uint48 accessory;\n        uint48 head;\n        uint48 glasses;\n    }\n\n    function generateSeed(uint256 nounId, INounsDescriptor descriptor) external view returns (Seed memory);\n}\n"
    },
    "contracts/NounsSeeder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/// @title The NounsToken pseudo-random seed generator\n\n/*********************************\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░█████████░░█████████░░░ *\n * ░░░░░░██░░░████░░██░░░████░░░ *\n * ░░██████░░░████████░░░████░░░ *\n * ░░██░░██░░░████░░██░░░████░░░ *\n * ░░██░░██░░░████░░██░░░████░░░ *\n * ░░░░░░█████████░░█████████░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\n *********************************/\n\npragma solidity ^0.8.6;\n\nimport { INounsSeeder } from './interfaces/INounsSeeder.sol';\nimport { INounsDescriptor } from './interfaces/INounsDescriptor.sol';\n\ncontract NounsSeeder is INounsSeeder {\n    /**\n     * @notice Generate a pseudo-random Noun seed using the previous blockhash and noun ID.\n     */\n    // prettier-ignore\n    function generateSeed(uint256 nounId, INounsDescriptor descriptor) external view override returns (Seed memory) {\n        uint256 pseudorandomness = uint256(\n            keccak256(abi.encodePacked(blockhash(block.number - 1), nounId))\n        );\n\n        uint256 backgroundCount = descriptor.backgroundCount();\n        uint256 bodyCount = descriptor.bodyCount();\n        uint256 accessoryCount = descriptor.accessoryCount();\n        uint256 headCount = descriptor.headCount();\n        uint256 glassesCount = descriptor.glassesCount();\n\n        return Seed({\n            background: uint48(\n                uint48(pseudorandomness) % backgroundCount\n            ),\n            body: uint48(\n                uint48(pseudorandomness >> 48) % bodyCount\n            ),\n            accessory: uint48(\n                uint48(pseudorandomness >> 96) % accessoryCount\n            ),\n            head: uint48(\n                uint48(pseudorandomness >> 144) % headCount\n            ),\n            glasses: uint48(\n                uint48(pseudorandomness >> 192) % glassesCount\n            )\n        });\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}