{
  "address": "0xf560D84eF2eDF8e8c17Db26e9b2427795DA70cA5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "BaseURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "DataURIToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PartsLocked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accessories",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessoryCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_accessory",
          "type": "bytes"
        }
      ],
      "name": "addAccessory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_background",
          "type": "string"
        }
      ],
      "name": "addBackground",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_body",
          "type": "bytes"
        }
      ],
      "name": "addBody",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_paletteIndex",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_color",
          "type": "string"
        }
      ],
      "name": "addColorToPalette",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_glasses",
          "type": "bytes"
        }
      ],
      "name": "addGlasses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_head",
          "type": "bytes"
        }
      ],
      "name": "addHead",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "_accessories",
          "type": "bytes[]"
        }
      ],
      "name": "addManyAccessories",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_backgrounds",
          "type": "string[]"
        }
      ],
      "name": "addManyBackgrounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "_bodies",
          "type": "bytes[]"
        }
      ],
      "name": "addManyBodies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "paletteIndex",
          "type": "uint8"
        },
        {
          "internalType": "string[]",
          "name": "newColors",
          "type": "string[]"
        }
      ],
      "name": "addManyColorsToPalette",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "_glasses",
          "type": "bytes[]"
        }
      ],
      "name": "addManyGlasses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "_heads",
          "type": "bytes[]"
        }
      ],
      "name": "addManyHeads",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arePartsLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "backgroundCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "backgrounds",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bodies",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bodyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint48",
              "name": "background",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "body",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "accessory",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "head",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "glasses",
              "type": "uint48"
            }
          ],
          "internalType": "struct INounsSeeder.Seed",
          "name": "seed",
          "type": "tuple"
        }
      ],
      "name": "dataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint48",
              "name": "background",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "body",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "accessory",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "head",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "glasses",
              "type": "uint48"
            }
          ],
          "internalType": "struct INounsSeeder.Seed",
          "name": "seed",
          "type": "tuple"
        }
      ],
      "name": "generateSVGImage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint48",
              "name": "background",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "body",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "accessory",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "head",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "glasses",
              "type": "uint48"
            }
          ],
          "internalType": "struct INounsSeeder.Seed",
          "name": "seed",
          "type": "tuple"
        }
      ],
      "name": "genericDataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "glasses",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "glassesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "headCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "heads",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDataURIEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockParts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "palettes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleDataURIEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint48",
              "name": "background",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "body",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "accessory",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "head",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "glasses",
              "type": "uint48"
            }
          ],
          "internalType": "struct INounsSeeder.Seed",
          "name": "seed",
          "type": "tuple"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc4ee394a824492ceb0c4abe651c1cf11b04deacbb6d31b8e3ba9b15d03847f46",
  "receipt": {
    "to": null,
    "from": "0x9700C08dB89246CeE319370b88907c474499cC0C",
    "contractAddress": "0xf560D84eF2eDF8e8c17Db26e9b2427795DA70cA5",
    "transactionIndex": 5,
    "gasUsed": "4137940",
    "logsBloom": "0x
    "blockHash": "0xa82fc438e555026fe422cd088344e51ac7587652dd0ac24b4c788ff6a3307c60",
    "transactionHash": "0xc4ee394a824492ceb0c4abe651c1cf11b04deacbb6d31b8e3ba9b15d03847f46",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 11033451,
        "transactionHash": "0xc4ee394a824492ceb0c4abe651c1cf11b04deacbb6d31b8e3ba9b15d03847f46",
        "address": "0xf560D84eF2eDF8e8c17Db26e9b2427795DA70cA5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009700c08db89246cee319370b88907c474499cc0c"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xa82fc438e555026fe422cd088344e51ac7587652dd0ac24b4c788ff6a3307c60"
      }
    ],
    "blockNumber": 11033451,
    "cumulativeGasUsed": "4620233",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3c3c99dd1d6f9057b182fe3b80fa68e8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"DataURIToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PartsLocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accessories\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessoryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_accessory\",\"type\":\"bytes\"}],\"name\":\"addAccessory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_background\",\"type\":\"string\"}],\"name\":\"addBackground\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_body\",\"type\":\"bytes\"}],\"name\":\"addBody\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_paletteIndex\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_color\",\"type\":\"string\"}],\"name\":\"addColorToPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_glasses\",\"type\":\"bytes\"}],\"name\":\"addGlasses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_head\",\"type\":\"bytes\"}],\"name\":\"addHead\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_accessories\",\"type\":\"bytes[]\"}],\"name\":\"addManyAccessories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_backgrounds\",\"type\":\"string[]\"}],\"name\":\"addManyBackgrounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_bodies\",\"type\":\"bytes[]\"}],\"name\":\"addManyBodies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"paletteIndex\",\"type\":\"uint8\"},{\"internalType\":\"string[]\",\"name\":\"newColors\",\"type\":\"string[]\"}],\"name\":\"addManyColorsToPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_glasses\",\"type\":\"bytes[]\"}],\"name\":\"addManyGlasses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_heads\",\"type\":\"bytes[]\"}],\"name\":\"addManyHeads\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arePartsLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backgroundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"backgrounds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bodies\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bodyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"body\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"accessory\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"glasses\",\"type\":\"uint48\"}],\"internalType\":\"struct INounsSeeder.Seed\",\"name\":\"seed\",\"type\":\"tuple\"}],\"name\":\"dataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"body\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"accessory\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"glasses\",\"type\":\"uint48\"}],\"internalType\":\"struct INounsSeeder.Seed\",\"name\":\"seed\",\"type\":\"tuple\"}],\"name\":\"generateSVGImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"body\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"accessory\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"glasses\",\"type\":\"uint48\"}],\"internalType\":\"struct INounsSeeder.Seed\",\"name\":\"seed\",\"type\":\"tuple\"}],\"name\":\"genericDataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"glasses\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glassesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"headCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"heads\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDataURIEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockParts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"palettes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleDataURIEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"body\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"accessory\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"glasses\",\"type\":\"uint48\"}],\"internalType\":\"struct INounsSeeder.Seed\",\"name\":\"seed\",\"type\":\"tuple\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAccessory(bytes)\":{\"details\":\"This function can only be called by the owner when not locked.\"},\"addBackground(string)\":{\"details\":\"This function can only be called by the owner when not locked.\"},\"addBody(bytes)\":{\"details\":\"This function can only be called by the owner when not locked.\"},\"addColorToPalette(uint8,string)\":{\"details\":\"This function can only be called by the owner.\"},\"addGlasses(bytes)\":{\"details\":\"This function can only be called by the owner when not locked.\"},\"addHead(bytes)\":{\"details\":\"This function can only be called by the owner when not locked.\"},\"addManyAccessories(bytes[])\":{\"details\":\"This function can only be called by the owner when not locked.\"},\"addManyBackgrounds(string[])\":{\"details\":\"This function can only be called by the owner when not locked.\"},\"addManyBodies(bytes[])\":{\"details\":\"This function can only be called by the owner when not locked.\"},\"addManyColorsToPalette(uint8,string[])\":{\"details\":\"This function can only be called by the owner.\"},\"addManyGlasses(bytes[])\":{\"details\":\"This function can only be called by the owner when not locked.\"},\"addManyHeads(bytes[])\":{\"details\":\"This function can only be called by the owner when not locked.\"},\"lockParts()\":{\"details\":\"This cannot be reversed and can only be called by the owner when not locked.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBaseURI(string)\":{\"details\":\"This can only be called by the owner.\"},\"toggleDataURIEnabled()\":{\"details\":\"This can only be called by the owner.\"},\"tokenURI(uint256,(uint48,uint48,uint48,uint48,uint48))\":{\"details\":\"The returned value may be a base64 encoded data URI or an API URL.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accessoryCount()\":{\"notice\":\"Get the number of available Noun `accessories`.\"},\"addAccessory(bytes)\":{\"notice\":\"Add a Noun accessory.\"},\"addBackground(string)\":{\"notice\":\"Add a Noun background.\"},\"addBody(bytes)\":{\"notice\":\"Add a Noun body.\"},\"addColorToPalette(uint8,string)\":{\"notice\":\"Add a single color to a color palette.\"},\"addGlasses(bytes)\":{\"notice\":\"Add Noun glasses.\"},\"addHead(bytes)\":{\"notice\":\"Add a Noun head.\"},\"addManyAccessories(bytes[])\":{\"notice\":\"Batch add Noun accessories.\"},\"addManyBackgrounds(string[])\":{\"notice\":\"Batch add Noun backgrounds.\"},\"addManyBodies(bytes[])\":{\"notice\":\"Batch add Noun bodies.\"},\"addManyColorsToPalette(uint8,string[])\":{\"notice\":\"Add colors to a color palette.\"},\"addManyGlasses(bytes[])\":{\"notice\":\"Batch add Noun glasses.\"},\"addManyHeads(bytes[])\":{\"notice\":\"Batch add Noun heads.\"},\"backgroundCount()\":{\"notice\":\"Get the number of available Noun `backgrounds`.\"},\"bodyCount()\":{\"notice\":\"Get the number of available Noun `bodies`.\"},\"dataURI(uint256,(uint48,uint48,uint48,uint48,uint48))\":{\"notice\":\"Given a token ID and seed, construct a base64 encoded data URI for an official Nouns DAO noun.\"},\"generateSVGImage((uint48,uint48,uint48,uint48,uint48))\":{\"notice\":\"Given a seed, construct a base64 encoded SVG image.\"},\"genericDataURI(string,string,(uint48,uint48,uint48,uint48,uint48))\":{\"notice\":\"Given a name, description, and seed, construct a base64 encoded data URI.\"},\"glassesCount()\":{\"notice\":\"Get the number of available Noun `glasses`.\"},\"headCount()\":{\"notice\":\"Get the number of available Noun `heads`.\"},\"lockParts()\":{\"notice\":\"Lock all Noun parts.\"},\"setBaseURI(string)\":{\"notice\":\"Set the base URI for all token IDs. It is automatically added as a prefix to the value returned in {tokenURI}, or to the token ID if {tokenURI} is empty.\"},\"toggleDataURIEnabled()\":{\"notice\":\"Toggle a boolean value which determines if `tokenURI` returns a data URI or an HTTP URL.\"},\"tokenURI(uint256,(uint48,uint48,uint48,uint48,uint48))\":{\"notice\":\"Given a token ID and seed, construct a token URI for an official Nouns DAO noun.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NounsDescriptor.sol\":\"NounsDescriptor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/NounsDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title The Nouns NFT descriptor\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\\nimport { Strings } from '@openzeppelin/contracts/utils/Strings.sol';\\nimport { INounsDescriptor } from './interfaces/INounsDescriptor.sol';\\nimport { INounsSeeder } from './interfaces/INounsSeeder.sol';\\nimport { NFTDescriptor } from './libs/NFTDescriptor.sol';\\nimport { MultiPartRLEToSVG } from './libs/MultiPartRLEToSVG.sol';\\n\\ncontract NounsDescriptor is INounsDescriptor, Ownable {\\n    using Strings for uint256;\\n\\n    // prettier-ignore\\n    // https://creativecommons.org/publicdomain/zero/1.0/legalcode.txt\\n    bytes32 constant COPYRIGHT_CC0_1_0_UNIVERSAL_LICENSE = 0xa2010f343487d3f7618affe54f789f5487602331c0a8d03f49e9a7c547cf0499;\\n\\n    // Whether or not new Noun parts can be added\\n    bool public override arePartsLocked;\\n\\n    // Whether or not `tokenURI` should be returned as a data URI (Default: true)\\n    bool public override isDataURIEnabled = true;\\n\\n    // Base URI\\n    string public override baseURI;\\n\\n    // Noun Color Palettes (Index => Hex Colors)\\n    mapping(uint8 => string[]) public override palettes;\\n\\n    // Noun Backgrounds (Hex Colors)\\n    string[] public override backgrounds;\\n\\n    // Noun Bodies (Custom RLE)\\n    bytes[] public override bodies;\\n\\n    // Noun Accessories (Custom RLE)\\n    bytes[] public override accessories;\\n\\n    // Noun Heads (Custom RLE)\\n    bytes[] public override heads;\\n\\n    // Noun Glasses (Custom RLE)\\n    bytes[] public override glasses;\\n\\n    /**\\n     * @notice Require that the parts have not been locked.\\n     */\\n    modifier whenPartsNotLocked() {\\n        require(!arePartsLocked, 'Parts are locked');\\n        _;\\n    }\\n\\n    /**\\n     * @notice Get the number of available Noun `backgrounds`.\\n     */\\n    function backgroundCount() external view override returns (uint256) {\\n        return backgrounds.length;\\n    }\\n\\n    /**\\n     * @notice Get the number of available Noun `bodies`.\\n     */\\n    function bodyCount() external view override returns (uint256) {\\n        return bodies.length;\\n    }\\n\\n    /**\\n     * @notice Get the number of available Noun `accessories`.\\n     */\\n    function accessoryCount() external view override returns (uint256) {\\n        return accessories.length;\\n    }\\n\\n    /**\\n     * @notice Get the number of available Noun `heads`.\\n     */\\n    function headCount() external view override returns (uint256) {\\n        return heads.length;\\n    }\\n\\n    /**\\n     * @notice Get the number of available Noun `glasses`.\\n     */\\n    function glassesCount() external view override returns (uint256) {\\n        return glasses.length;\\n    }\\n\\n    /**\\n     * @notice Add colors to a color palette.\\n     * @dev This function can only be called by the owner.\\n     */\\n    function addManyColorsToPalette(uint8 paletteIndex, string[] calldata newColors) external override onlyOwner {\\n        require(palettes[paletteIndex].length + newColors.length <= 256, 'Palettes can only hold 256 colors');\\n        for (uint256 i = 0; i < newColors.length; i++) {\\n            _addColorToPalette(paletteIndex, newColors[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Batch add Noun backgrounds.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addManyBackgrounds(string[] calldata _backgrounds) external override onlyOwner whenPartsNotLocked {\\n        for (uint256 i = 0; i < _backgrounds.length; i++) {\\n            _addBackground(_backgrounds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Batch add Noun bodies.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addManyBodies(bytes[] calldata _bodies) external override onlyOwner whenPartsNotLocked {\\n        for (uint256 i = 0; i < _bodies.length; i++) {\\n            _addBody(_bodies[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Batch add Noun accessories.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addManyAccessories(bytes[] calldata _accessories) external override onlyOwner whenPartsNotLocked {\\n        for (uint256 i = 0; i < _accessories.length; i++) {\\n            _addAccessory(_accessories[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Batch add Noun heads.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addManyHeads(bytes[] calldata _heads) external override onlyOwner whenPartsNotLocked {\\n        for (uint256 i = 0; i < _heads.length; i++) {\\n            _addHead(_heads[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Batch add Noun glasses.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addManyGlasses(bytes[] calldata _glasses) external override onlyOwner whenPartsNotLocked {\\n        for (uint256 i = 0; i < _glasses.length; i++) {\\n            _addGlasses(_glasses[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add a single color to a color palette.\\n     * @dev This function can only be called by the owner.\\n     */\\n    function addColorToPalette(uint8 _paletteIndex, string calldata _color) external override onlyOwner {\\n        require(palettes[_paletteIndex].length <= 255, 'Palettes can only hold 256 colors');\\n        _addColorToPalette(_paletteIndex, _color);\\n    }\\n\\n    /**\\n     * @notice Add a Noun background.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addBackground(string calldata _background) external override onlyOwner whenPartsNotLocked {\\n        _addBackground(_background);\\n    }\\n\\n    /**\\n     * @notice Add a Noun body.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addBody(bytes calldata _body) external override onlyOwner whenPartsNotLocked {\\n        _addBody(_body);\\n    }\\n\\n    /**\\n     * @notice Add a Noun accessory.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addAccessory(bytes calldata _accessory) external override onlyOwner whenPartsNotLocked {\\n        _addAccessory(_accessory);\\n    }\\n\\n    /**\\n     * @notice Add a Noun head.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addHead(bytes calldata _head) external override onlyOwner whenPartsNotLocked {\\n        _addHead(_head);\\n    }\\n\\n    /**\\n     * @notice Add Noun glasses.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addGlasses(bytes calldata _glasses) external override onlyOwner whenPartsNotLocked {\\n        _addGlasses(_glasses);\\n    }\\n\\n    /**\\n     * @notice Lock all Noun parts.\\n     * @dev This cannot be reversed and can only be called by the owner when not locked.\\n     */\\n    function lockParts() external override onlyOwner whenPartsNotLocked {\\n        arePartsLocked = true;\\n\\n        emit PartsLocked();\\n    }\\n\\n    /**\\n     * @notice Toggle a boolean value which determines if `tokenURI` returns a data URI\\n     * or an HTTP URL.\\n     * @dev This can only be called by the owner.\\n     */\\n    function toggleDataURIEnabled() external override onlyOwner {\\n        bool enabled = !isDataURIEnabled;\\n\\n        isDataURIEnabled = enabled;\\n        emit DataURIToggled(enabled);\\n    }\\n\\n    /**\\n     * @notice Set the base URI for all token IDs. It is automatically\\n     * added as a prefix to the value returned in {tokenURI}, or to the\\n     * token ID if {tokenURI} is empty.\\n     * @dev This can only be called by the owner.\\n     */\\n    function setBaseURI(string calldata _baseURI) external override onlyOwner {\\n        baseURI = _baseURI;\\n\\n        emit BaseURIUpdated(_baseURI);\\n    }\\n\\n    /**\\n     * @notice Given a token ID and seed, construct a token URI for an official Nouns DAO noun.\\n     * @dev The returned value may be a base64 encoded data URI or an API URL.\\n     */\\n    function tokenURI(uint256 tokenId, INounsSeeder.Seed memory seed) external view override returns (string memory) {\\n        if (isDataURIEnabled) {\\n            return dataURI(tokenId, seed);\\n        }\\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\\n    }\\n\\n    /**\\n     * @notice Given a token ID and seed, construct a base64 encoded data URI for an official Nouns DAO noun.\\n     */\\n    function dataURI(uint256 tokenId, INounsSeeder.Seed memory seed) public view override returns (string memory) {\\n        string memory nounId = tokenId.toString();\\n        string memory name = string(abi.encodePacked('Noun ', nounId));\\n        string memory description = string(abi.encodePacked('Noun ', nounId, ' is a member of the Nouns DAO'));\\n\\n        return genericDataURI(name, description, seed);\\n    }\\n\\n    /**\\n     * @notice Given a name, description, and seed, construct a base64 encoded data URI.\\n     */\\n    function genericDataURI(\\n        string memory name,\\n        string memory description,\\n        INounsSeeder.Seed memory seed\\n    ) public view override returns (string memory) {\\n        NFTDescriptor.TokenURIParams memory params = NFTDescriptor.TokenURIParams({\\n            name: name,\\n            description: description,\\n            parts: _getPartsForSeed(seed),\\n            background: backgrounds[seed.background]\\n        });\\n        return NFTDescriptor.constructTokenURI(params, palettes);\\n    }\\n\\n    /**\\n     * @notice Given a seed, construct a base64 encoded SVG image.\\n     */\\n    function generateSVGImage(INounsSeeder.Seed memory seed) external view override returns (string memory) {\\n        MultiPartRLEToSVG.SVGParams memory params = MultiPartRLEToSVG.SVGParams({\\n            parts: _getPartsForSeed(seed),\\n            background: backgrounds[seed.background]\\n        });\\n        return NFTDescriptor.generateSVGImage(params, palettes);\\n    }\\n\\n    /**\\n     * @notice Add a single color to a color palette.\\n     */\\n    function _addColorToPalette(uint8 _paletteIndex, string calldata _color) internal {\\n        palettes[_paletteIndex].push(_color);\\n    }\\n\\n    /**\\n     * @notice Add a Noun background.\\n     */\\n    function _addBackground(string calldata _background) internal {\\n        backgrounds.push(_background);\\n    }\\n\\n    /**\\n     * @notice Add a Noun body.\\n     */\\n    function _addBody(bytes calldata _body) internal {\\n        bodies.push(_body);\\n    }\\n\\n    /**\\n     * @notice Add a Noun accessory.\\n     */\\n    function _addAccessory(bytes calldata _accessory) internal {\\n        accessories.push(_accessory);\\n    }\\n\\n    /**\\n     * @notice Add a Noun head.\\n     */\\n    function _addHead(bytes calldata _head) internal {\\n        heads.push(_head);\\n    }\\n\\n    /**\\n     * @notice Add Noun glasses.\\n     */\\n    function _addGlasses(bytes calldata _glasses) internal {\\n        glasses.push(_glasses);\\n    }\\n\\n    /**\\n     * @notice Get all Noun parts for the passed `seed`.\\n     */\\n    function _getPartsForSeed(INounsSeeder.Seed memory seed) internal view returns (bytes[] memory) {\\n        bytes[] memory _parts = new bytes[](4);\\n        _parts[0] = bodies[seed.body];\\n        _parts[1] = accessories[seed.accessory];\\n        _parts[2] = heads[seed.head];\\n        _parts[3] = glasses[seed.glasses];\\n        return _parts;\\n    }\\n}\\n\",\"keccak256\":\"0x7b619dd30432ce138fd68e79f714044b2b02176d5fd408f9e8d679331486cc47\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INounsDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for NounsDescriptor\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { INounsSeeder } from './INounsSeeder.sol';\\n\\ninterface INounsDescriptor {\\n    event PartsLocked();\\n\\n    event DataURIToggled(bool enabled);\\n\\n    event BaseURIUpdated(string baseURI);\\n\\n    function arePartsLocked() external returns (bool);\\n\\n    function isDataURIEnabled() external returns (bool);\\n\\n    function baseURI() external returns (string memory);\\n\\n    function palettes(uint8 paletteIndex, uint256 colorIndex) external view returns (string memory);\\n\\n    function backgrounds(uint256 index) external view returns (string memory);\\n\\n    function bodies(uint256 index) external view returns (bytes memory);\\n\\n    function accessories(uint256 index) external view returns (bytes memory);\\n\\n    function heads(uint256 index) external view returns (bytes memory);\\n\\n    function glasses(uint256 index) external view returns (bytes memory);\\n\\n    function backgroundCount() external view returns (uint256);\\n\\n    function bodyCount() external view returns (uint256);\\n\\n    function accessoryCount() external view returns (uint256);\\n\\n    function headCount() external view returns (uint256);\\n\\n    function glassesCount() external view returns (uint256);\\n\\n    function addManyColorsToPalette(uint8 paletteIndex, string[] calldata newColors) external;\\n\\n    function addManyBackgrounds(string[] calldata backgrounds) external;\\n\\n    function addManyBodies(bytes[] calldata bodies) external;\\n\\n    function addManyAccessories(bytes[] calldata accessories) external;\\n\\n    function addManyHeads(bytes[] calldata heads) external;\\n\\n    function addManyGlasses(bytes[] calldata glasses) external;\\n\\n    function addColorToPalette(uint8 paletteIndex, string calldata color) external;\\n\\n    function addBackground(string calldata background) external;\\n\\n    function addBody(bytes calldata body) external;\\n\\n    function addAccessory(bytes calldata accessory) external;\\n\\n    function addHead(bytes calldata head) external;\\n\\n    function addGlasses(bytes calldata glasses) external;\\n\\n    function lockParts() external;\\n\\n    function toggleDataURIEnabled() external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function tokenURI(uint256 tokenId, INounsSeeder.Seed memory seed) external view returns (string memory);\\n\\n    function dataURI(uint256 tokenId, INounsSeeder.Seed memory seed) external view returns (string memory);\\n\\n    function genericDataURI(\\n        string calldata name,\\n        string calldata description,\\n        INounsSeeder.Seed memory seed\\n    ) external view returns (string memory);\\n\\n    function generateSVGImage(INounsSeeder.Seed memory seed) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x87bac5321fd5d5cc8c7b4e83cebb68b28ec8ccea25890441f24f21e5349798ef\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INounsSeeder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for NounsSeeder\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { INounsDescriptor } from './INounsDescriptor.sol';\\n\\ninterface INounsSeeder {\\n    struct Seed {\\n        uint48 background;\\n        uint48 body;\\n        uint48 accessory;\\n        uint48 head;\\n        uint48 glasses;\\n    }\\n\\n    function generateSeed(uint256 nounId, INounsDescriptor descriptor) external view returns (Seed memory);\\n}\\n\",\"keccak256\":\"0x1d4912076a8f3c7f01eefe415161590c32efe1a32eb1211a09da6808191c23db\",\"license\":\"GPL-3.0\"},\"contracts/libs/MultiPartRLEToSVG.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title A library used to convert multi-part RLE compressed images to SVG\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.6;\\n\\nlibrary MultiPartRLEToSVG {\\n    struct SVGParams {\\n        bytes[] parts;\\n        string background;\\n    }\\n\\n    struct ContentBounds {\\n        uint8 top;\\n        uint8 right;\\n        uint8 bottom;\\n        uint8 left;\\n    }\\n\\n    struct Rect {\\n        uint8 length;\\n        uint8 colorIndex;\\n    }\\n\\n    struct DecodedImage {\\n        uint8 paletteIndex;\\n        ContentBounds bounds;\\n        uint256 width;\\n        Rect[] rects;\\n    }\\n\\n    /**\\n     * @notice Given RLE image parts and color palettes, merge to generate a single SVG image.\\n     */\\n    function generateSVG(SVGParams memory params, mapping(uint8 => string[]) storage palettes)\\n        internal\\n        view\\n        returns (string memory svg)\\n    {\\n        // prettier-ignore\\n        return string(\\n            abi.encodePacked(\\n                '<svg width=\\\"320\\\" height=\\\"320\\\" viewBox=\\\"0 0 320 320\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" shape-rendering=\\\"crispEdges\\\">',\\n                '<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#', params.background, '\\\" />',\\n                _generateSVGRects(params, palettes),\\n                '</svg>'\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Given RLE image parts and color palettes, generate SVG rects.\\n     */\\n    // prettier-ignore\\n    function _generateSVGRects(SVGParams memory params, mapping(uint8 => string[]) storage palettes)\\n        private\\n        view\\n        returns (string memory svg)\\n    {\\n        string[33] memory lookup = [\\n            '0', '10', '20', '30', '40', '50', '60', '70', \\n            '80', '90', '100', '110', '120', '130', '140', '150', \\n            '160', '170', '180', '190', '200', '210', '220', '230', \\n            '240', '250', '260', '270', '280', '290', '300', '310',\\n            '320' \\n        ];\\n        string memory rects;\\n        for (uint8 p = 0; p < params.parts.length; p++) {\\n            DecodedImage memory image = _decodeRLEImage(params.parts[p]);\\n            string[] storage palette = palettes[image.paletteIndex];\\n            uint256 currentX = image.bounds.left;\\n            uint256 currentY = image.bounds.top;\\n            uint256 cursor;\\n            string[16] memory buffer;\\n\\n            string memory part;\\n            for (uint256 i = 0; i < image.rects.length; i++) {\\n                Rect memory rect = image.rects[i];\\n                if (rect.colorIndex != 0) {\\n                    buffer[cursor] = lookup[rect.length];          // width\\n                    buffer[cursor + 1] = lookup[currentX];         // x\\n                    buffer[cursor + 2] = lookup[currentY];         // y\\n                    buffer[cursor + 3] = palette[rect.colorIndex]; // color\\n\\n                    cursor += 4;\\n\\n                    if (cursor >= 16) {\\n                        part = string(abi.encodePacked(part, _getChunk(cursor, buffer)));\\n                        cursor = 0;\\n                    }\\n                }\\n\\n                currentX += rect.length;\\n                if (currentX - image.bounds.left == image.width) {\\n                    currentX = image.bounds.left;\\n                    currentY++;\\n                }\\n            }\\n\\n            if (cursor != 0) {\\n                part = string(abi.encodePacked(part, _getChunk(cursor, buffer)));\\n            }\\n            rects = string(abi.encodePacked(rects, part));\\n        }\\n        return rects;\\n    }\\n\\n    /**\\n     * @notice Return a string that consists of all rects in the provided `buffer`.\\n     */\\n    // prettier-ignore\\n    function _getChunk(uint256 cursor, string[16] memory buffer) private pure returns (string memory) {\\n        string memory chunk;\\n        for (uint256 i = 0; i < cursor; i += 4) {\\n            chunk = string(\\n                abi.encodePacked(\\n                    chunk,\\n                    '<rect width=\\\"', buffer[i], '\\\" height=\\\"10\\\" x=\\\"', buffer[i + 1], '\\\" y=\\\"', buffer[i + 2], '\\\" fill=\\\"#', buffer[i + 3], '\\\" />'\\n                )\\n            );\\n        }\\n        return chunk;\\n    }\\n\\n    /**\\n     * @notice Decode a single RLE compressed image into a `DecodedImage`.\\n     */\\n    function _decodeRLEImage(bytes memory image) private pure returns (DecodedImage memory) {\\n        uint8 paletteIndex = uint8(image[0]);\\n        ContentBounds memory bounds = ContentBounds({\\n            top: uint8(image[1]),\\n            right: uint8(image[2]),\\n            bottom: uint8(image[3]),\\n            left: uint8(image[4])\\n        });\\n        uint256 width = bounds.right - bounds.left;\\n\\n        uint256 cursor;\\n        Rect[] memory rects = new Rect[]((image.length - 5) / 2);\\n        for (uint256 i = 5; i < image.length; i += 2) {\\n            rects[cursor] = Rect({ length: uint8(image[i]), colorIndex: uint8(image[i + 1]) });\\n            cursor++;\\n        }\\n        return DecodedImage({ paletteIndex: paletteIndex, bounds: bounds, width: width, rects: rects });\\n    }\\n}\\n\",\"keccak256\":\"0x0be58bbc5d7120c2820e062cbd72ccb4be5619863e99ceea07885057bbdb405a\",\"license\":\"GPL-3.0\"},\"contracts/libs/NFTDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title A library used to construct ERC721 token URIs and SVG images\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { Base64 } from 'base64-sol/base64.sol';\\nimport { MultiPartRLEToSVG } from './MultiPartRLEToSVG.sol';\\n\\nlibrary NFTDescriptor {\\n    struct TokenURIParams {\\n        string name;\\n        string description;\\n        bytes[] parts;\\n        string background;\\n    }\\n\\n    /**\\n     * @notice Construct an ERC721 token URI.\\n     */\\n    function constructTokenURI(TokenURIParams memory params, mapping(uint8 => string[]) storage palettes)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        string memory image = generateSVGImage(\\n            MultiPartRLEToSVG.SVGParams({ parts: params.parts, background: params.background }),\\n            palettes\\n        );\\n\\n        // prettier-ignore\\n        return string(\\n            abi.encodePacked(\\n                'data:application/json;base64,',\\n                Base64.encode(\\n                    bytes(\\n                        abi.encodePacked('{\\\"name\\\":\\\"', params.name, '\\\", \\\"description\\\":\\\"', params.description, '\\\", \\\"image\\\": \\\"', 'data:image/svg+xml;base64,', image, '\\\"}')\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Generate an SVG image for use in the ERC721 token URI.\\n     */\\n    function generateSVGImage(MultiPartRLEToSVG.SVGParams memory params, mapping(uint8 => string[]) storage palettes)\\n        internal\\n        view\\n        returns (string memory svg)\\n    {\\n        return Base64.encode(bytes(MultiPartRLEToSVG.generateSVG(params, palettes)));\\n    }\\n}\\n\",\"keccak256\":\"0xc79b4a633ed8427f1e4ae1d424b86b03dbc20a777840260c16c2bf44c9c539d2\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAccessory(bytes)": {
        "details": "This function can only be called by the owner when not locked."
      },
      "addBackground(string)": {
        "details": "This function can only be called by the owner when not locked."
      },
      "addBody(bytes)": {
        "details": "This function can only be called by the owner when not locked."
      },
      "addColorToPalette(uint8,string)": {
        "details": "This function can only be called by the owner."
      },
      "addGlasses(bytes)": {
        "details": "This function can only be called by the owner when not locked."
      },
      "addHead(bytes)": {
        "details": "This function can only be called by the owner when not locked."
      },
      "addManyAccessories(bytes[])": {
        "details": "This function can only be called by the owner when not locked."
      },
      "addManyBackgrounds(string[])": {
        "details": "This function can only be called by the owner when not locked."
      },
      "addManyBodies(bytes[])": {
        "details": "This function can only be called by the owner when not locked."
      },
      "addManyColorsToPalette(uint8,string[])": {
        "details": "This function can only be called by the owner."
      },
      "addManyGlasses(bytes[])": {
        "details": "This function can only be called by the owner when not locked."
      },
      "addManyHeads(bytes[])": {
        "details": "This function can only be called by the owner when not locked."
      },
      "lockParts()": {
        "details": "This cannot be reversed and can only be called by the owner when not locked."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBaseURI(string)": {
        "details": "This can only be called by the owner."
      },
      "toggleDataURIEnabled()": {
        "details": "This can only be called by the owner."
      },
      "tokenURI(uint256,(uint48,uint48,uint48,uint48,uint48))": {
        "details": "The returned value may be a base64 encoded data URI or an API URL."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accessoryCount()": {
        "notice": "Get the number of available Noun `accessories`."
      },
      "addAccessory(bytes)": {
        "notice": "Add a Noun accessory."
      },
      "addBackground(string)": {
        "notice": "Add a Noun background."
      },
      "addBody(bytes)": {
        "notice": "Add a Noun body."
      },
      "addColorToPalette(uint8,string)": {
        "notice": "Add a single color to a color palette."
      },
      "addGlasses(bytes)": {
        "notice": "Add Noun glasses."
      },
      "addHead(bytes)": {
        "notice": "Add a Noun head."
      },
      "addManyAccessories(bytes[])": {
        "notice": "Batch add Noun accessories."
      },
      "addManyBackgrounds(string[])": {
        "notice": "Batch add Noun backgrounds."
      },
      "addManyBodies(bytes[])": {
        "notice": "Batch add Noun bodies."
      },
      "addManyColorsToPalette(uint8,string[])": {
        "notice": "Add colors to a color palette."
      },
      "addManyGlasses(bytes[])": {
        "notice": "Batch add Noun glasses."
      },
      "addManyHeads(bytes[])": {
        "notice": "Batch add Noun heads."
      },
      "backgroundCount()": {
        "notice": "Get the number of available Noun `backgrounds`."
      },
      "bodyCount()": {
        "notice": "Get the number of available Noun `bodies`."
      },
      "dataURI(uint256,(uint48,uint48,uint48,uint48,uint48))": {
        "notice": "Given a token ID and seed, construct a base64 encoded data URI for an official Nouns DAO noun."
      },
      "generateSVGImage((uint48,uint48,uint48,uint48,uint48))": {
        "notice": "Given a seed, construct a base64 encoded SVG image."
      },
      "genericDataURI(string,string,(uint48,uint48,uint48,uint48,uint48))": {
        "notice": "Given a name, description, and seed, construct a base64 encoded data URI."
      },
      "glassesCount()": {
        "notice": "Get the number of available Noun `glasses`."
      },
      "headCount()": {
        "notice": "Get the number of available Noun `heads`."
      },
      "lockParts()": {
        "notice": "Lock all Noun parts."
      },
      "setBaseURI(string)": {
        "notice": "Set the base URI for all token IDs. It is automatically added as a prefix to the value returned in {tokenURI}, or to the token ID if {tokenURI} is empty."
      },
      "toggleDataURIEnabled()": {
        "notice": "Toggle a boolean value which determines if `tokenURI` returns a data URI or an HTTP URL."
      },
      "tokenURI(uint256,(uint48,uint48,uint48,uint48,uint48))": {
        "notice": "Given a token ID and seed, construct a token URI for an official Nouns DAO noun."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/NounsDescriptor.sol:NounsDescriptor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 502,
        "contract": "contracts/NounsDescriptor.sol:NounsDescriptor",
        "label": "arePartsLocked",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 506,
        "contract": "contracts/NounsDescriptor.sol:NounsDescriptor",
        "label": "isDataURIEnabled",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 509,
        "contract": "contracts/NounsDescriptor.sol:NounsDescriptor",
        "label": "baseURI",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 515,
        "contract": "contracts/NounsDescriptor.sol:NounsDescriptor",
        "label": "palettes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint8,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 519,
        "contract": "contracts/NounsDescriptor.sol:NounsDescriptor",
        "label": "backgrounds",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 523,
        "contract": "contracts/NounsDescriptor.sol:NounsDescriptor",
        "label": "bodies",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_bytes_storage)dyn_storage"
      },
      {
        "astId": 527,
        "contract": "contracts/NounsDescriptor.sol:NounsDescriptor",
        "label": "accessories",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_bytes_storage)dyn_storage"
      },
      {
        "astId": 531,
        "contract": "contracts/NounsDescriptor.sol:NounsDescriptor",
        "label": "heads",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_bytes_storage)dyn_storage"
      },
      {
        "astId": 535,
        "contract": "contracts/NounsDescriptor.sol:NounsDescriptor",
        "label": "glasses",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_bytes_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint8,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}